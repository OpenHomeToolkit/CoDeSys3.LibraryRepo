<?xml version="1.0" encoding="utf-8"?>
<Library Name="CmpIecTask, 3.5.9.0 (System)">
  <Node Name="IecTaskGetInfo2_Internal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{c6d3a5e1-7385-4753-b73c-f3b0df563229}" />
  <Node Name="EVTPARAM_CmpIecTask2" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Event parameter" ObjectGUID="{d193901e-55a9-4133-aab9-5b62c1e66bef}" />
  <Node Name="EVTPARAM_CmpIecTask" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" OBSOLETE Event Parameter, please use EVTPARAM_CmpIecTask2 instead" ObjectGUID="{51a1cfc5-91d3-4c86-bc6a-0326fc383fa6}" />
  <Node Name="Version" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{9ea86c23-1b20-4d8a-9e5c-b6b3f4d3bf0c}" />
  <Node Name="Timeout" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{19968cdc-eb44-4c28-b90f-3ff3b6623e62}" />
  <Node Name="Task_Info2" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Task information out of the task configuration&#xD;&#xA;&#xD;&#xA; Task configuration menbers which are used with |IecTaskCreate| are marked with [c], status members are marked with [s].&#xD;&#xA;&#xD;&#xA; Note for SIL2: This information is already inside of the data area, so we don't need to tag it as safe anywhere." ObjectGUID="{a1e9fbd6-93bf-46b3-bfe6-3b3118b8971a}" />
  <Node Name="Task_Info" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" IsHidden="true" ObjectGUID="{b83e07ab-a3d0-41a5-8f83-2de38b279984}" />
  <Node Name="Task_Desc2" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{8aae8b50-7942-4e5a-a518-30c6e58221e6}" />
  <Node Name="Task_Desc" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" OBSOLETE struct, please use Task_Desc2 instead" ObjectGUID="{7b86dcd2-c024-46db-b942-88ae42b845a4}" />
  <Node Name="TaskType" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" IEC task types" ObjectGUID="{ea995514-e413-465b-b844-525ec4bd4fe4}" />
  <Node Name="TaskState" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Task status definitions" ObjectGUID="{727d992c-ff7e-44e7-8cfb-05791907d897}" />
  <Node Name="Project Settings" TypeGUID="{8753fe6f-4a22-4320-8103-e553c4fc8e04}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6470a90f-b7cb-43ac-9ae5-94b2338b4573}" />
  <Node Name="Project Information" TypeGUID="{085afe48-c5d8-4ea5-ab0d-b35701fa6009}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{11c0fc3a-9bcf-4dd8-ac38-efb93363e521}" />
  <Node Name="Jitter_Distribution" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Jitter distribution" ObjectGUID="{f914311f-5c52-4cd5-b2c8-3263a1508247}" />
  <Node Name="InternalFunctions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{dcee829f-5056-4e9c-a631-efb6f8c40cb7}" />
  <Node Name="IecTaskResetStatistics" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Reset the task statistics of a task (see Task_Info member e.g. dwCycleTime, dwAverageCycleTime, etc.)&#xD;&#xA; :return: Returns the runtime system error code (see CmpErrors.library)" ObjectGUID="{914a41a5-cf80-476d-afbe-df44dd65f473}" />
  <Node Name="IecTaskReload" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Reload a specified IEC task. Reload means here: Delete the task at the actual position and create it newly.&#xD;&#xA; :return: Handle to the new created task" ObjectGUID="{5fd661ba-c47d-4de1-9e79-3438e1b22b59}" />
  <Node Name="IecTaskGetProfiling" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{863b2a0a-de2d-4424-ba18-451797f7ad2a}" />
  <Node Name="IecTaskGetNext" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Get the first IEC task in the specified application&#xD;&#xA; :return: Returns the andle to the first IEC task " ObjectGUID="{44c640c1-f54f-4ea7-96ac-4fad07e72c1a}" />
  <Node Name="IecTaskGetInfo3" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the task information of the specified task &#xD;&#xA; :return: Return a pointer to the task info structure" ObjectGUID="{941fd632-1e71-4fc0-a13a-6074eb0adf1c}" />
  <Node Name="IecTaskGetInfo2" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{148c0cea-bcf0-410f-b4d6-c4f6932532a4}" />
  <Node Name="IecTaskGetFirst" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Get the first IEC task in the specified application&#xD;&#xA; :return: Returns the handle to the first IEC task" ObjectGUID="{94296c55-56c2-4b16-a897-4ea4d1a9090d}" />
  <Node Name="IecTaskGetCurrent" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Funktion to get own task handle&#xD;&#xA; :return: Returns the current IEC task handle" ObjectGUID="{b1d506b4-a9e7-4ec3-8e73-e6697d723ffb}" />
  <Node Name="IecTaskEnableWatchdog2" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Enable watchdog for the specified task&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;     - You have to disable the watchdog of the task before with |IecTaskDisableWatchdog2| and _not_ with |IecTaskDisableWatchdog|, because they act on different task flags!&#xD;&#xA;     - The watchdog is enabled only at the next IEC cycle and _not_ immediately after calling this function!&#xD;&#xA;       But if you never enable the watchdog after calling |IecTaskDisableWatchdog2|, the watchdog is disabled forever!&#xD;&#xA;     - As a consequence, you always have to call |IecTaskDisableWatchdog2| and |IecTaskEnableWatchdog2| symmetrical&#xD;&#xA;     - Can be called nested. Last call enables the watchdog.&#xD;&#xA; :return: Returns the runtime system error code (see CmpErrors.library)&#xD;&#xA;     + ERR_OK: The watchdog for the task was enabled&#xD;&#xA;     + ERR_PARAMETER: The task handle was invalid" ObjectGUID="{8e2031d3-e075-4fad-bd6b-5b6e436cbeec}" />
  <Node Name="IecTaskEnableWatchdog" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Enable watchdog for the specified task&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;     - You have to disable the watchdog of the task before with |IecTaskDisableWatchdog| and _not_ with |IecTaskDisableWatchdog2|, because they act on different task flags!&#xD;&#xA;     - The watchdog is enabled only at the next IEC cycle and _not_ immediately after calling this function!&#xD;&#xA;     - If you disable with |IecTaskDisableWatchdog| and forgot to enable it, at least at the next cycle, the watchdog is automatically enabled!&#xD;&#xA; :return: Returns the runtime system error code (see CmpErrors.library)&#xD;&#xA;     + ERR_OK: The watchdog for the task was enabled&#xD;&#xA;     + ERR_PARAMETER: The task handle was invalid" ObjectGUID="{9ca06cd9-8fc7-4467-aab2-ce1f64094974}" />
  <Node Name="IecTaskEnableScheduling" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Enable scheduling for one specified task&#xD;&#xA; :return: Returns the runtime system error code (see CmpErrors.library)" ObjectGUID="{dee70a02-5a76-4519-97cf-fb7350f391e5}" />
  <Node Name="IecTaskDisableWatchdog2" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Disable watchdog for the specified task&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;     - You have to enable the watchdog of the task with |IecTaskEnableWatchdog2| and _not_ with |IecTaskEnableWatchdog|, because they act on different task flags!&#xD;&#xA;     - The watchdog is disabled until |IecTaskEnableWatchdog2| is called!!! So this is a security issue, if you never enable the watchdog!&#xD;&#xA;     - As a consequence, you always have to call |IecTaskDisableWatchdog2| and |IecTaskEnableWatchdog2| symmetrical&#xD;&#xA;     - Can be called nested. First call disables the watchdog.&#xD;&#xA; :return: Returns the runtime system error code (see CmpErrors.library)&#xD;&#xA;     + ERR_OK: The watchdog for the task was disabled&#xD;&#xA;     + ERR_PARAMETER: The task handle was invalid" ObjectGUID="{c5d54ac9-42ba-41bf-bd47-5917616af40f}" />
  <Node Name="IecTaskDisableWatchdog" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Disable watchdog for the specified task&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;     - You have to enable the watchdog of the task with |IecTaskEnableWatchdog| and _not_ with |IecTaskEnableWatchdog2|, because they act on different task flags!&#xD;&#xA;     - The watchdog is disabled only for the current cycle! At the next cycle, the watchod is automatically enabled!&#xD;&#xA; :return: Returns the runtime system error code (see CmpErrors.library)&#xD;&#xA;     + ERR_OK: The watchdog for the task was disabled&#xD;&#xA;     + ERR_PARAMETER: The task handle was invalid" ObjectGUID="{c0662ee4-596e-4507-8642-7507896f1c79}" />
  <Node Name="IecTaskDisableScheduling" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Disable scheduling for the specified task&#xD;&#xA; :return: Returns the runtime system error code (see CmpErrors.library)" ObjectGUID="{4589d457-750b-4a5b-9365-099a5ddce7cc}" />
  <Node Name="IecTaskDelete2" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Delete an IEC task with timeout&#xD;&#xA; :return: Error code " ObjectGUID="{640f2bf7-f0b9-41b3-93a9-77cb6045cb4a}" />
  <Node Name="IecTaskCreate" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Create a new IEC Task&#xD;&#xA;&#xD;&#xA; IEC Tasks itself are used by the scheduler of the runtime. They don't &#xD;&#xA; essentially need a corresponding OS task or timer. They might be handled&#xD;&#xA; by the scheduler in a completely different way.&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;     | Task_Info2.dwEventFunctionPointer:&#xD;&#xA;     | Function pointer to the event check routine in case Task_Info2.KindOfTask = TaskEvent&#xD;&#xA;&#xD;&#xA;     .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;         FUNCTION CheckEvent : BOOL&#xD;&#xA;         VAR_INPUT&#xD;&#xA;         END_VAR&#xD;&#xA;&#xD;&#xA;         (* This function checks wether the event is triggered *)&#xD;&#xA;         (* by returning TRUE: raising edge, status, etc. *)&#xD;&#xA;&#xD;&#xA;     | Task_Info2.dwTaskEntryFunctionPointer: &#xD;&#xA;     | Function pointer to the task code&#xD;&#xA;&#xD;&#xA;     .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;         FUNCTION IecTaskCyclic : BOOL&#xD;&#xA;         VAR_INPUT&#xD;&#xA;             parameter : IEC_CYCLE_STRUCT;&#xD;&#xA;         END_VAR&#xD;&#xA;         VAR&#xD;&#xA;             udiState : UDINT;&#xD;&#xA;             hTask : RTS_IEC_HANDLE;&#xD;&#xA;         END_VAR&#xD;&#xA;&#xD;&#xA;         (* ----- mandatory cyclic task frame code begin ----- *)&#xD;&#xA;         udiState := parameter.pApplication^.udiState;&#xD;&#xA;         hTask := parameter.hTaskHandle;&#xD;&#xA;         IF udiState = AS_STOP THEN&#xD;&#xA;             RETURN;&#xD;&#xA;         END_IF&#xD;&#xA;         IF parameter.pTaskInfo^.bWatchdog THEN&#xD;&#xA;             IecTaskEnableWatchdog(hTask);&#xD;&#xA;         END_IF&#xD;&#xA;         (* ------ mandatory cyclic task frame code end ------ *)&#xD;&#xA;&#xD;&#xA; Error code:&#xD;&#xA;     + ERR_OK: The new task was successfully created.&#xD;&#xA;     + ERR_FAILED: There was an error in a subsystem (e.g. the scheduler could not allocate his task handle).&#xD;&#xA;     + ERR_PARAMETER: Invalid application- or task info pointer&#xD;&#xA;     + ERR_OUT_OF_LIMITS: Maximum number of Tasks reached (target specific)&#xD;&#xA;     + ERR_NOMEMORY: Unable to allocate the memory, that is necessary for the task description    &#xD;&#xA;&#xD;&#xA; :return: Handle to newly created task" ObjectGUID="{059d6385-b9be-4b50-8151-14bb99f31a34}" />
  <Node Name="IEC_CYCLE_STRUCT" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" This struct is passed as parameter to the TaskEntryFunction, see |IecTaskCreate| " ObjectGUID="{3aabce26-f2bf-4966-b07b-463c530ffbd2}" />
  <Node Name="EventParameter" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{08b4f600-3fbe-498b-9ac7-b2ee0f79e607}" />
  <Node Name="EventIDs" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{5295d4bc-30bd-4632-82d9-89d61c55d5c4}" />
  <Node Name="Bibliotheksverwalter" TypeGUID="{adb5cb65-8e1d-4a00-b70a-375ea27582f3}" EmbeddedTypeGUIDs="" ObjectGUID="{42d072a1-a297-4ab7-80f9-850b88085a81}" />
</Library>