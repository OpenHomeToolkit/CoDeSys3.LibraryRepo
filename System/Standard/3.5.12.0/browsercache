<?xml version="1.0" encoding="utf-8"?>
<Library Name="Standard, 3.5.12.0 (System)">
  <Node Name="R_TRIG" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Detects a rising edge of a boolean signal&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    RTRIGInst : R_TRIG ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    RTRIGInst(CLK := VarBOOL1);&#xD;&#xA;    VarBOOL2 := RTRIGInst.Q;&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :CLK: [TRUE,FALSE]&#xD;&#xA;     :~CLK_OLD: [TRUE,FALSE]&#xD;&#xA;     :Q: [TRUE,FALSE]&#xD;&#xA;" ObjectGUID="{752f4be3-bcd1-4b9f-8c29-de66d869ade4}" />
  <Node Name="F_TRIG" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Detects a falling edge of a boolean signal&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    FTRIGInst : F_TRIG ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    FTRIGInst(CLK := VarBOOL1);&#xD;&#xA;    VarBOOL2 := FTRIGInst.Q;&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :CLK: [TRUE,FALSE]&#xD;&#xA;     :~CLK_OLD: [TRUE,FALSE]&#xD;&#xA;     :Q: [TRUE,FALSE]&#xD;&#xA;" ObjectGUID="{e61ade46-3bcc-4694-ad27-9ec8487e7c4b}" />
  <Node Name="TP" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Implements a pulse timer&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    TPInst : TP ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    TPInst(IN := VarBOOL1, PT:= T#5s);&#xD;&#xA;    VarBOOL2 := TPInst.Q;&#xD;&#xA;&#xD;&#xA; .. image:: @(Tp)&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :IN: [TRUE,FALSE]&#xD;&#xA;     :PT: [0..255]&#xD;&#xA;     :~PT_OLD: [0..255]&#xD;&#xA;     :Q: [TRUE,FALSE]&#xD;&#xA;     :ET: [0..4294967295]&#xD;&#xA;" ObjectGUID="{53a0e079-a859-4ebf-9e4e-40f12f0a38e2}" />
  <Node Name="TON" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Implements a timer with a turn-on delay&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    TONInst : TON ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    TONInst(IN := VarBOOL1, PT:= T#5s);&#xD;&#xA;    VarBOOL2 := TONInst.Q;&#xD;&#xA;&#xD;&#xA; .. image:: @(Ton)&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :IN: [TRUE,FALSE]&#xD;&#xA;     :PT: [0..255]&#xD;&#xA;     :~PT_OLD: [0..255]&#xD;&#xA;     :Q: [TRUE,FALSE]&#xD;&#xA;     :ET: [0..4294967295]&#xD;&#xA;" ObjectGUID="{e1ef856a-b512-4271-b62a-e2b2db25e9c1}" />
  <Node Name="TOF" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Implements a timer with a turn-off delay&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    TOFInst : TOF ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    TOFInst(IN := VarBOOL1, PT:= T#5s);&#xD;&#xA;    VarBOOL2 := TOFInst.Q;&#xD;&#xA;&#xD;&#xA; .. image:: @(Tof)&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :IN: [TRUE,FALSE]&#xD;&#xA;     :PT: [0..255]&#xD;&#xA;     :~PT_OLD: [0..255]&#xD;&#xA;     :Q: [TRUE,FALSE]&#xD;&#xA;     :ET: [0..4294967295]&#xD;&#xA;" ObjectGUID="{77cdbe23-c031-4564-b7c2-6839e7f98c37}" />
  <Node Name="RIGHT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns a specific number of characters of a string, starting from right&#xD;&#xA;&#xD;&#xA; ``RIGHT (STR, SIZE)`` means: Return the first ``SIZE`` characters from the right in string ``STR``&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    VarSTRING1 : STRING ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST , result is 'USI' *)&#xD;&#xA;    VarSTRING1 := RIGHT ('SUSI',3);&#xD;&#xA;&#xD;&#xA; :return: Resulting string&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :STR: |StringRange255|&#xD;&#xA;     :SIZE: [0..255]&#xD;&#xA;&#xD;&#xA; .. |StringRange255| replace:: [NULL_STRING,TERMINATED_STRING_LEN0..TERMINATED_STRING_LEN127,TERMINATED_STRING_LEN128..TERMINATED_STRING_LEN255,UNTERMINATED_STRING]&#xD;&#xA;" ObjectGUID="{e1f7857b-7abd-48e8-91d6-d6b740f939c9}" />
  <Node Name="REPLACE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Replaces a specific number of characters of a string by another string&#xD;&#xA;&#xD;&#xA; ``REPLACE(STR1, STR2, L, P)`` means: Replace ``L`` characters from ``STR1`` by ``STR2``, beginning with the character in the ``P`` position. &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    VarSTRING1 : STRING ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST , result is 'SKYSI' *)&#xD;&#xA;    VarSTRING1 := REPLACE ('SUXYSI','K',2,2);&#xD;&#xA;&#xD;&#xA; :return: Resulting string&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :STR1: |StringRange255|&#xD;&#xA;     :STR2: |StringRange255|&#xD;&#xA;     :L: [0..255]&#xD;&#xA;     :P: [0,1..255]&#xD;&#xA;&#xD;&#xA; .. |StringRange255| replace:: [NULL_STRING,TERMINATED_STRING_LEN0..TERMINATED_STRING_LEN127,TERMINATED_STRING_LEN128..TERMINATED_STRING_LEN255,UNTERMINATED_STRING]&#xD;&#xA;" ObjectGUID="{f57e2f3d-6edd-4042-ac47-a14833c273c8}" />
  <Node Name="MID" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns a specific number of characters of a string, starting from a specific position&#xD;&#xA;&#xD;&#xA; ``MID (STR, LEN, POS)`` means: Retrieve ``LEN`` characters from the ``STR`` string beginning with the character at position ``POS``. &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    VarSTRING1 : STRING ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST , result is 'US' *)&#xD;&#xA;    VarSTRING1 := MID ('SUSI',2,2);&#xD;&#xA;&#xD;&#xA; :return: Partial string of ``STR``&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :STR: |StringRange255|&#xD;&#xA;     :LEN: [0..255]&#xD;&#xA;     :POS: [0,1..255]&#xD;&#xA;&#xD;&#xA; .. |StringRange255| replace:: [NULL_STRING,TERMINATED_STRING_LEN0..TERMINATED_STRING_LEN127,TERMINATED_STRING_LEN128..TERMINATED_STRING_LEN255,UNTERMINATED_STRING]&#xD;&#xA;" ObjectGUID="{83426200-a15f-4a0f-939b-ec775900aa99}" />
  <Node Name="LEN" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns the number of characters of a string&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    VarINT1 : INT ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST , result is '4 *)&#xD;&#xA;    VarINT1 := LEN ('SUSI');&#xD;&#xA;&#xD;&#xA; :return: Length of string ``STR``&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :STR: |StringRange255|&#xD;&#xA;&#xD;&#xA; .. |StringRange255| replace:: [NULL_STRING,TERMINATED_STRING_LEN0..TERMINATED_STRING_LEN127,TERMINATED_STRING_LEN128..TERMINATED_STRING_LEN255,UNTERMINATED_STRING]&#xD;&#xA;" ObjectGUID="{d60923f9-da06-44f9-ab52-de513236e3e2}" />
  <Node Name="LEFT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns a specific number of characters of a string, starting from left&#xD;&#xA;&#xD;&#xA; ``LEFT (STR, SIZE)`` means: Return the first ``SIZE`` characters from the left in string ``STR``&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    VarSTRING1 : STRING ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST , result is 'SUS' *)&#xD;&#xA;    VarSTRING1 := LEFT ('SUSI',3);&#xD;&#xA;&#xD;&#xA; :return: Resulting string&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :STR: |StringRange255|&#xD;&#xA;     :SIZE: [0..255]&#xD;&#xA;&#xD;&#xA; .. |StringRange255| replace:: [NULL_STRING,TERMINATED_STRING_LEN0..TERMINATED_STRING_LEN127,TERMINATED_STRING_LEN128..TERMINATED_STRING_LEN255,UNTERMINATED_STRING]&#xD;&#xA;" ObjectGUID="{305543de-642d-43ec-a366-8f771da1539d}" />
  <Node Name="INSERT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment="  Inserts a string into another string at a specific position &#xD;&#xA;&#xD;&#xA; ``INSERT (STR1, STR2, POS)`` means: Insert ``STR2`` into ``STR1`` after position ``POS``.&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    VarSTRING1 : STRING ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST , result is 'SUXYSI' *)&#xD;&#xA;    VarSTRING1 := INSERT ('SUSI','XY',2);&#xD;&#xA;&#xD;&#xA; :return: Resulting string&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :STR1: |StringRange255|&#xD;&#xA;     :STR2: |StringRange255|&#xD;&#xA;     :POS: [-1,0,1..255,256]&#xD;&#xA;&#xD;&#xA; .. |StringRange255| replace:: [NULL_STRING,TERMINATED_STRING_LEN0..TERMINATED_STRING_LEN127,TERMINATED_STRING_LEN128..TERMINATED_STRING_LEN255,UNTERMINATED_STRING]&#xD;&#xA;" ObjectGUID="{16129282-7de0-44c7-9d58-52c344055819}" />
  <Node Name="FIND" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Searches for the position of a partial string within a string. &#xD;&#xA;&#xD;&#xA; ``FIND(STR1, STR2)`` means: Find the position of the first character where ``STR2`` appears &#xD;&#xA; in ``STR1`` for the first time. If STR2 is not found in STR1, then OUT:=0.&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    arINT1 : INT ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST , result is '4' *)&#xD;&#xA;    arINT1 := FIND ('abcdef','de');&#xD;&#xA;&#xD;&#xA; :return: Character position of the first occurance of ``STR2`` in ``STR1``. If no occurance is found, result is 0&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :STR1: |StringRange255|&#xD;&#xA;     :STR2: |StringRange255|&#xD;&#xA;&#xD;&#xA; .. |StringRange255| replace:: [NULL_STRING,TERMINATED_STRING_LEN0..TERMINATED_STRING_LEN127,TERMINATED_STRING_LEN128..TERMINATED_STRING_LEN255,UNTERMINATED_STRING]&#xD;&#xA;" ObjectGUID="{182b0d71-64b9-4f59-8550-dfdea6ddbf15}" />
  <Node Name="DELETE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Deletes a number of characters from a string&#xD;&#xA;&#xD;&#xA; ``DELETE (STR, L, POS)`` means: Delete ``L`` characters from ``STR``, beginning with the character in the ``POS`` position.&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    VarSTRING1 : STRING ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST , result is 'SUSI' *)&#xD;&#xA;    VarSTRING1 := DELETE ('SUXYSI',2,3);&#xD;&#xA;&#xD;&#xA; :return: String remaining after deletion &#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :STR: |StringRange255|&#xD;&#xA;     :LEN: [0..255]&#xD;&#xA;     :POS: [0,1..255]&#xD;&#xA;&#xD;&#xA; .. |StringRange255| replace:: [NULL_STRING,TERMINATED_STRING_LEN0..TERMINATED_STRING_LEN127,TERMINATED_STRING_LEN128..TERMINATED_STRING_LEN255,UNTERMINATED_STRING]&#xD;&#xA;" ObjectGUID="{11510cc9-b7a0-4dd6-8600-402b1638691e}" />
  <Node Name="CONCAT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Concatenates two strings&#xD;&#xA;&#xD;&#xA; ``CONCAT(STR1,STR2)`` means: Connect ``STR1`` and ``STR2`` to a single string ``STR1STR2``.&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    VarSTRING1 : STRING ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST , result is 'SUSIWILLI' *)&#xD;&#xA;    VarSTRING1 := CONCAT ('SUSI','WILLI');&#xD;&#xA;&#xD;&#xA; :return: Concatenated string, max. 255 characters. If the result doesn't fit into these 255 bytes, it will be silently truncated. No error is produced.&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :STR1: |StringRange255|&#xD;&#xA;     :STR2: |StringRange255|&#xD;&#xA;&#xD;&#xA; .. |StringRange255| replace:: [NULL_STRING,TERMINATED_STRING_LEN0..TERMINATED_STRING_LEN127,TERMINATED_STRING_LEN128..TERMINATED_STRING_LEN255,UNTERMINATED_STRING]&#xD;&#xA;" ObjectGUID="{2534de7b-0ca5-4f62-a5ca-98671b8c49e2}" />
  <Node Name="RTC" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Calculates the elapsed time since a given start time&#xD;&#xA;&#xD;&#xA; Usage Examples:&#xD;&#xA;&#xD;&#xA; - This function block can be used as an operation hour counter, when&#xD;&#xA;   ``PDT`` is set to ``DT#1970-01-01-00-00:00``, or is simply not connected.&#xD;&#xA;&#xD;&#xA; - This function block can be used to return the current date and time,&#xD;&#xA;   by adjusting the FB to the current local time. Just, set the input&#xD;&#xA;   ``PDT`` to the current local time, on the rising edge of ``EN``.&#xD;&#xA;&#xD;&#xA; .. note ::&#xD;&#xA;    This counter will have an overflow at the 7th February, 2106.&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    RTC(EN:=VarBOOL1, PDT:=DT#2006-03-30-14:00:00, Q=&gt;VarBOOL2, CDT=&gt;VarTimeCur);&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :EN: [TRUE,FALSE]&#xD;&#xA;     :PDT: [0..4294967295]&#xD;&#xA;     :Q: [TRUE,FALSE]&#xD;&#xA;     :CDT: [0..4294967295]&#xD;&#xA;" ObjectGUID="{1701c579-c548-4b36-85cf-d899774aa717}" />
  <Node Name="Tp" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{d1068028-0e92-4bb5-8aeb-08bfdbf87e0b}" />
  <Node Name="Ton" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{c3792301-4fc0-4a44-8812-43b8e89a36c8}" />
  <Node Name="Tof" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6136d773-6bab-48c9-b50c-b06601a63fce}" />
  <Node Name="CTUD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Increments and decrements a given value&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :CU: [TRUE,FALSE]&#xD;&#xA;     :~CU_OLD: [TRUE,FALSE]&#xD;&#xA;     :CD: [TRUE,FALSE]&#xD;&#xA;     :~CD_OLD: [TRUE,FALSE]&#xD;&#xA;     :RESET: [TRUE,FALSE]&#xD;&#xA;     :LOAD: [TRUE,FALSE]&#xD;&#xA;     :PV: [0..65535]&#xD;&#xA;     :QU: [TRUE,FALSE]&#xD;&#xA;     :QD: [TRUE,FALSE]&#xD;&#xA;     :CV: [0,1..65534,65535]&#xD;&#xA;     :~CV_OLD: [0,1..65534,65535]&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;    Datatype ``WORD``, which is used for ``PV`` in CODESYS, does not match the IEC standard, which for ``PV`` defines datatype ``INT``.&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    CTUDInst : CUTD ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    CTUDInst(CU := VarBOOL1, CD:= VarBOOL2, RESET := VarBOOL3, LOAD:=VarBOOL4 , PV:= VarWORD1);&#xD;&#xA;&#xD;&#xA;    VarBOOL5 := CTUDInst.QU ;&#xD;&#xA;    VarBOOL6 := CTUDInst.QD ;&#xD;&#xA;    VarWORD2 := CTUDInst.CV ;&#xD;&#xA;" ObjectGUID="{5ac2ae3a-5112-4c53-8081-23fa3030b086}" />
  <Node Name="CTU" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Increments a given value&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :CU: [TRUE,FALSE]&#xD;&#xA;     :~CU_OLD: [TRUE,FALSE]&#xD;&#xA;     :RESET: [TRUE,FALSE]&#xD;&#xA;     :PV: [0..65535]&#xD;&#xA;     :Q: [TRUE,FALSE]&#xD;&#xA;     :CV: [0..65534,65535]&#xD;&#xA;     :~CV_OLD: [0..65534,65535]&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    CTUInst : CTU ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    CTUInst(CU:= VarBOOL1, RESET:=VarBOOL2 , PV:= VarWORD1);&#xD;&#xA;    VarBOOL3 := CTUInst.Q ;&#xD;&#xA;    VarWORD2 := CTUInst.CV;&#xD;&#xA;" ObjectGUID="{8ceaf43b-b92f-4774-99b1-3f1822a5efe2}" />
  <Node Name="CTD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Decrements a given value&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :CD: [TRUE,FALSE]&#xD;&#xA;     :~CD_OLD: [TRUE,FALSE]&#xD;&#xA;     :LOAD: [TRUE,FALSE]&#xD;&#xA;     :PV: [0..65535]&#xD;&#xA;     :Q: [TRUE,FALSE]&#xD;&#xA;     :CV: [0,1..65535]&#xD;&#xA;     :~CV_OLD: [0,1..65535]&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    CTDInst : CTD ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    CTDInst(CD:= VarBOOL1, LOAD:=VarBOOL2 , PV:= VarWORD1);&#xD;&#xA;    VarBOOL3 := CTDInst.Q ;&#xD;&#xA;    VarWORD2 := CTDInst.CV;&#xD;&#xA;" ObjectGUID="{e217557f-4ce8-4ebf-8895-17a506ec6f24}" />
  <Node Name="SR" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Realizes a bistable set-dominat latch&#xD;&#xA; &#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :SET1: [TRUE,FALSE]&#xD;&#xA;     :RESET: [TRUE,FALSE]&#xD;&#xA;     :~Q1_IN: [TRUE,FALSE]&#xD;&#xA;     :Q1: [TRUE,FALSE]&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    SRInst : SR;&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    SRInst(SET1:= VarBOOL1 , RESET:=VarBOOL2 );&#xD;&#xA;    VarBOOL3 := SRInst.Q1 ;&#xD;&#xA;" ObjectGUID="{586fb43a-de36-436c-ad09-47bf604d5610}" />
  <Node Name="RS" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Realizes a bistable reset-dominat latch&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :SET: [TRUE,FALSE]&#xD;&#xA;     :RESET1: [TRUE,FALSE]&#xD;&#xA;     :~Q1_IN: [TRUE,FALSE]&#xD;&#xA;     :Q1: [TRUE,FALSE]&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;    (* Example declaration *)&#xD;&#xA;    RSInst : RS ;&#xD;&#xA;&#xD;&#xA;    (* Example in ST *)&#xD;&#xA;    RSInst(SET:= VarBOOL1 , RESET1:=VarBOOL2 );&#xD;&#xA;    VarBOOL3 := RSInst.Q1 ;&#xD;&#xA;" ObjectGUID="{572816a7-c0e2-475d-a5d3-8093ffe11dea}" />
  <Node Name="Trigger" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{66591dc8-a58f-4004-a572-ecdccea715f6}" />
  <Node Name="Timer" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{afba9766-9c96-49e9-bdd8-e1ae71bcd1bc}" />
  <Node Name="String Functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{01807cb8-774e-491f-aa91-8387a4243c45}" />
  <Node Name="Project Settings" TypeGUID="{8753fe6f-4a22-4320-8103-e553c4fc8e04}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6470a90f-b7cb-43ac-9ae5-94b2338b4573}" />
  <Node Name="Project Information" TypeGUID="{085afe48-c5d8-4ea5-ab0d-b35701fa6009}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{11c0fc3a-9bcf-4dd8-ac38-efb93363e521}" />
  <Node Name="Miscellaneous" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{96df2d2e-810b-4388-9d2c-282c4fec540d}" />
  <Node Name="Images" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{ba1bd634-61d9-40ba-b9f8-0c1f6cd3f460}" />
  <Node Name="Counter" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{52eacb59-3e4c-40d0-88fe-46a0a8b20428}" />
  <Node Name="Bistable Function Blocks" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{41799a76-3422-4b6d-a3a6-d23704769b90}" />
  <Node Name="00000000-0000-0000-0000-000000000000|D:\temp\Util.Lib Images\Tp.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{d95c072c-a5ec-4b7c-a88f-a9885290511e}" />
  <Node Name="00000000-0000-0000-0000-000000000000|D:\temp\Util.Lib Images\Ton.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{8a6fcbd4-8b24-46c0-bb3b-80b5d60b90fb}" />
  <Node Name="00000000-0000-0000-0000-000000000000|D:\temp\Util.Lib Images\Tof.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{d6e871fc-c7e4-4fbf-a416-06cd8f5531f5}" />
</Library>