<?xml version="1.0" encoding="utf-8"?>
<Library Name="CAA Memory, 3.5.12.0 (CAA Technical Workgroup)">
  <Node Name="LowWord" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the low word of the input &quot;dwValue&quot;.&#xD;&#xA; &#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        dwValue : WORD := 16#12345678 ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.LowWord(dwValue) = 16#5678&#xD;&#xA;&#xD;&#xA; :return: function returns low word of &quot;dwValue&quot;" ObjectGUID="{6c7fde13-c03e-4982-a8ce-5cd189aa6b69}" />
  <Node Name="LowByte" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the low byte of the input &quot;wValue&quot;.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        wValue : WORD := 16#1234 ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.LowByte(wValue) = 16#34&#xD;&#xA;&#xD;&#xA; :return: function returns low byte of &quot;wValue&quot;" ObjectGUID="{ac7e7299-80b3-4aac-8b3c-3e583506e4cd}" />
  <Node Name="HighWord" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the high word of the input &quot;dwValue&quot;.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        dwValue : WORD := 16#12345678 ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.HighWord(dwValue) = 16#1234&#xD;&#xA;&#xD;&#xA; :return: function returns high wird of &quot;dwValue&quot;" ObjectGUID="{5c3dd09e-ebb1-4e3b-b57d-7015eab20db5}" />
  <Node Name="HighByte" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the high byte of the input &quot;wValue&quot;.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        wValue : WORD := 16#1234 ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.HighByte(wValue) = 16#12&#xD;&#xA;&#xD;&#xA; :return: function returns high byte of &quot;wValue&quot;" ObjectGUID="{4880905f-b7b6-4404-9baf-79308647eb51}" />
  <Node Name="FindByte" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function look for the first occurence of &quot;byValue&quot; in &quot;MemoryBlock&quot;.&#xD;&#xA; &#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        abyMemoryBlockA : ARRAY[0..9] OF BYTE := 0,1,2,3,4,5,6,7,8,9 ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.FindByte(ADR(abyMemoryBlockA),10,5) = 6&#xD;&#xA;&#xD;&#xA; :return: function returns 0 if &quot;byValue&quot; is not found. Otherwise the function returns the position of the first occurence" ObjectGUID="{eb0a6852-0394-4eeb-95f3-2890b4124d3b}" />
  <Node Name="FindBlock" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function looks for the first occurence of &quot;MemoryBlockB&quot; within &quot;MemoryBlockA&quot;.&#xD;&#xA; &#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        abyMemoryBlockA : ARRAY[0..9] OF BYTE := 0,1,2,3,4,5,6,7,8,9 ;&#xD;&#xA;        abyMemoryBlockB : ARRAY[0..2] OF BYTE := 6,7,8 ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.FindBlock(ADR(abyMemoryBlockA),10,ADR(abyMemoryBlockB),3) = 7&#xD;&#xA;&#xD;&#xA; :return: function returns 0, if &quot;MemoryBlockB&quot; cannot be found. Otherwise the function returns the position of the first occurence" ObjectGUID="{51a22d07-bc08-4da8-85db-3b47948b4f2c}" />
  <Node Name="Compare" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function compares &quot;MemoryBlockA&quot; with &quot;MemoryBlockB&quot;. Up to &quot;uiNumberOfBytes&quot; will be compared.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        abyMemoryBlockA : ARRAY[0..9] OF BYTE := 0,1,2,3,4,5,6,7,8,9 ;&#xD;&#xA;        abyMemoryBlockB : ARRAY[0..9] OF BYTE := 0,1,2,0,4,5,6,7,8,9 ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.Compare(ADR(abyMemoryBlockA),ADR(abyMemoryBlockB),10) = 4&#xD;&#xA;&#xD;&#xA; :return: function return 0 if the blocks are identical. If they are different then function returns the first position that differ" ObjectGUID="{072e39c6-6786-4757-a3f4-72983fa7b140}" />
  <Node Name="ReverseWORDsInDWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the DWORD &quot;dwInput&quot; with a reversed word-order (Low-Word&lt;-&gt;High-Word).&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        dwInput = 16#01020304&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.ReverseWORDsInDWORD(dwInput) = 16#03040102&#xD;&#xA;&#xD;&#xA; :return: function returns a DWORD with reversed word-order of &quot;dwInput&quot;" ObjectGUID="{d523d152-1611-424f-b37a-c1d1bdfb106c}" />
  <Node Name="ReverseBitsInWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the WORD &quot;wInput&quot; with a reversed bit-order.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        wInput = 16#0102 = 2#00000001 00000010&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.ReverseBitsInWORD(wInput) = 16#4080 = 2#01000000 10000000&#xD;&#xA;&#xD;&#xA; :return: function returns a WORD with reversed bit-order of &quot;wInput&quot;" ObjectGUID="{7d6f88bc-151a-4845-801f-beb9e920c552}" />
  <Node Name="ReverseBitsInDWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the DWORD &quot;dwInput&quot; with a reversed bit-order.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        dwInput = 16#01020304 = 2#00000001 00000010 00000011 00000100&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.ReverseBitsInDWORD(dwInput) = 16#20C04080 = 2#00100000 11000000 01000000 10000000&#xD;&#xA;&#xD;&#xA; :return: function returns a DWORD with reveresed bit-order of &quot;dwInput&quot;" ObjectGUID="{d9a097af-6c7b-4632-a3d9-3a2e3ef93271}" />
  <Node Name="ReverseBitsInBYTE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the BYTE &quot;byInput&quot; with a reversed bit-order.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        byInput = 16#01 = 2#00000001&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.ReverseBitsInBYTE(byInput) = 16#80 = 2#10000000&#xD;&#xA;&#xD;&#xA; :return: function returns a BYTE with reversed bit-order of &quot;byInput&quot;" ObjectGUID="{da3f6107-69c8-4493-82cd-f5312febfd56}" />
  <Node Name="ReverseBYTEsInWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the WORD &quot;wInput&quot; with a reversed byte-order (Low-Byte&lt;-&gt;High-Byte).&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        wInput = 16#0102&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.ReverseBYTEsInWORD(wInput) = 16#0201" ObjectGUID="{2707d58f-d335-4bf5-b880-46bd7b53be22}" />
  <Node Name="ReverseBYTEsInDWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the DWORD &quot;dwInput&quot; with a reversed byte-order.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        dwInput = 16#01020304&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.ReverseWORDsInDWORD(dwInput) = 16#04030201&#xD;&#xA;&#xD;&#xA; :return: function returns a DWORD with reversed byte-order of &quot;dwInput&quot;" ObjectGUID="{56779358-07f7-4c42-973e-aaf31c02148c}" />
  <Node Name="UnpackWord" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function block unpacks &quot;wValue&quot; and returns the 2 bytes contained &#xD;&#xA; &quot;byLowByte&quot; and &quot;byHighByte&quot; and the 16 bits &quot;xBit0&quot; .. &quot;xBit15&quot;.&#xD;&#xA;&#xD;&#xA; Prefix: &quot;memuw&quot;.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        wValue = 16#0102 = 2#00000001 00000010&#xD;&#xA;        -&gt;&#xD;&#xA;        byLowByte = 16#02&#xD;&#xA;        byHighByte = 16#01&#xD;&#xA;        xBit1, xBit8 = TRUE&#xD;&#xA;        remain bits = FALSE" ObjectGUID="{94781bf2-8c73-4480-bb31-cd9b7554f684}" />
  <Node Name="UnpackDWord" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function block unpacks &quot;dwValue&quot; and returns the two contained &quot;wLowWord&quot;, &quot;wHighWord&quot;,&#xD;&#xA; the 4 contained bytes &quot;byLLByte&quot; .. &quot;byHHByte&quot; and the 32 bits &quot;xBit0&quot; .. &quot;xBit31&quot;.&#xD;&#xA;&#xD;&#xA; Prefix: &quot;memudw&quot;.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        dwValue = 16#01020304 = 2#00000001 00000010 00000011 00000100&#xD;&#xA;        -&gt;&#xD;&#xA;        byLowWord = 16#0304&#xD;&#xA;        byHighWord = 16#0102&#xD;&#xA;        byLLByte = 16#04&#xD;&#xA;        byLHByte = 16#03&#xD;&#xA;        byHLByte = 16#02&#xD;&#xA;        byHHByte = 16#01&#xD;&#xA;        xBit2, xBit8, xBit9, xBit17 and xBit24 = TRUE&#xD;&#xA;        remaining bits = FALSE" ObjectGUID="{bcc57c7a-1356-4318-bab3-55b1c10ebdf9}" />
  <Node Name="UnpackByte" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function block unpacks &quot;byValue&quot; and returns the 8 bits &quot;xBit0&quot; .. &quot;xBit7&quot;.&#xD;&#xA;&#xD;&#xA; Prefix: &quot;memuby&quot;.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        byInput = 16#01 = 2#00000001&#xD;&#xA;        -&gt;&#xD;&#xA;        xBit0 = TRUE&#xD;&#xA;        xBit1..xBit7 = FALSE" ObjectGUID="{13dddeaf-e0b5-47e8-bc09-e6fe5b0cb97b}" />
  <Node Name="UnpackArrayOfByte" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" The function unpacks an &quot;ARRAY OF BYTE&quot; in an &quot;ARRAY OF BOOL&quot;.&#xD;&#xA;&#xD;&#xA; | abySource[0].0 -&gt; axDestination[0]&#xD;&#xA; | abySource[0].1 -&gt; axDestination[1]&#xD;&#xA; | ...&#xD;&#xA; | abySource[1].0 -&gt; axDestination[8]&#xD;&#xA; | ...&#xD;&#xA; | abySource[1].7 -&gt; axDestination[15]&#xD;&#xA; | ...&#xD;&#xA;&#xD;&#xA; The function copies the amount of &quot;uiNumberOfBits&quot; from &quot;abySource&quot; to &quot;axDestination&quot;.&#xD;&#xA; The function will return the number of bytes considered in &quot;abySource&quot;.&#xD;&#xA; If &quot;pabySource&quot;, &quot;paxDestination&quot; or &quot;uiNumberOfBits&quot; are set to &quot;0&quot;, the copying will &#xD;&#xA; not be carried out and the function will return &quot;FALSE&quot;.&#xD;&#xA; &#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        abySource : ARRAY[0..2] OF BYTE :=  16#32, 16#01, 16#00 ;&#xD;&#xA;        axDestination : ARRAY[0..9] OF BOOL ;&#xD;&#xA;        uiNumberofBytes := MEM.UnpackArrayOfByte(ADR(abySource), ADR(axDestination), 10) ;&#xD;&#xA;        -&gt;&#xD;&#xA;        uiNumberofBytes = 2 &#xD;&#xA;        axDestination[0] = FALSE&#xD;&#xA;        axDestination[1] = TRUE&#xD;&#xA;        axDestination[2] = FALSE&#xD;&#xA;        axDestination[3] = FALSE&#xD;&#xA;        axDestination[4] = TRUE&#xD;&#xA;        axDestination[5] = TRUE&#xD;&#xA;        axDestination[6] = FALSE&#xD;&#xA;        axDestination[7] = FALSE&#xD;&#xA;        axDestination[8] = TRUE&#xD;&#xA;        axDestination[9] = FALSE&#xD;&#xA;    &#xD;&#xA; .. note::&#xD;&#xA;&#xD;&#xA;        The size of the array &quot;axDestination&quot; has to be adjusted to the number of bits to be copied! Source and target may not overlap! &#xD;&#xA;&#xD;&#xA; :return: function returns the number of bytes considered in &quot;abySource&quot;" ObjectGUID="{5d74f3da-f06b-42e9-99a5-f28f5ee712dd}" />
  <Node Name="PackWordsToDword" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function packs low and high WORD into a DWORD.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        MEM.PackWordsToDword(16#0102, 16#0304) = 16#01020304&#xD;&#xA;&#xD;&#xA; :return: function returns the DWORD defined by the WORD inputs" ObjectGUID="{ae841b74-03e7-4663-bb30-906d8676e9b5}" />
  <Node Name="PackBytesToWord" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function packs low and high BYTE into a WORD.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        MEM.PackBytesToWord(16#01,16#02) = 16#0102&#xD;&#xA;&#xD;&#xA; :return: function returns the WORD defined by the BYTE inputs" ObjectGUID="{f74f427b-f493-4ffd-b8c7-6d6adae71e35}" />
  <Node Name="PackBytesToDword" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function pack four BYTEs into a DWORD.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        MEM.PackBytesToDword(16#01,16#02,16#03,16#04) = 16#01020304&#xD;&#xA;&#xD;&#xA; :return: functions returns the DWORD defined by the BYTE inputs" ObjectGUID="{30ef502b-09e3-4936-98a8-45e994468074}" />
  <Node Name="PackBitsToWord" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function packs 16 Bits &quot;xBit0&quot; .. &quot;xBit15&quot; into a WORD.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        PackBitsToWord(FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,&#xD;&#xA;        FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE) = 16#0102&#xD;&#xA;&#xD;&#xA; :return: function returns the WORD defined by the BOOL inputs" ObjectGUID="{952a97c7-cd74-4eb1-ae97-c7abe6baf748}" />
  <Node Name="PackBitsToDword" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function packs 32 Bits &quot;xBit0&quot; .. &quot;xBit31&quot; into a DWORD.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        PackBitsToDword(&#xD;&#xA;        FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,&#xD;&#xA;        FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE,&#xD;&#xA;        FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,&#xD;&#xA;        FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE ) = 16#01020304&#xD;&#xA;&#xD;&#xA; :return: function returns the DWORD defined by the BOOL inputs" ObjectGUID="{179ce6b5-d9fa-4374-9ee3-2645c878d207}" />
  <Node Name="PackBitsToByte" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function packs 8 Bits &quot;xBit0&quot; .. &quot;xBit7&quot; into a BYTE.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        PackBitsToByte(FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE) = 16#01&#xD;&#xA;&#xD;&#xA; :return: functions returns the BYTE defined by the BOOL inputs" ObjectGUID="{e222acbd-d4d7-481b-b35f-8740dff0ab4b}" />
  <Node Name="PackArrayOfBoolToArrayOfByte" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" The function packs an &quot;ARRAY OF BOOL&quot; into an &quot;ARRAY OF BYTE&quot;.&#xD;&#xA; &#xD;&#xA; | axSource[0] -&gt; abyDestination[0].0&#xD;&#xA; | axSource[1] -&gt; abyDestination[0].1&#xD;&#xA; | ...&#xD;&#xA; | axSource[8] -&gt; abyDestination[1].0&#xD;&#xA; | ...&#xD;&#xA; | axSource[15] -&gt; abyDestination[1].7&#xD;&#xA; | ...&#xD;&#xA;&#xD;&#xA; The function copies &quot;uiNumberOfBits&quot; from &quot;axSource&quot; to &quot;abyDestination&quot;.&#xD;&#xA; It will return the necessary number of bytes in &quot;abyDestination&quot;.&#xD;&#xA; Only if &quot;paxSource&quot;, &quot;pabyDestination&quot; or &quot;uiNumberOfBits&quot; are set to &quot;0&quot;, the copying will not be carried out and the function will return &quot;0&quot;.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        axSource : ARRAY[0..9] OF BOOL := FALSE,TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE ;&#xD;&#xA;        abyDestination : ARRAY[0..2] OF BYTE ;&#xD;&#xA;        uiNumberofBytes := MEM.PackArrayOfBool(ADR(abSource), ADR(abyDestination), 10) ;&#xD;&#xA;        -&gt;&#xD;&#xA;        uiNumberofBytes = 2 &#xD;&#xA;        abyDestination[0] = 16#32&#xD;&#xA;        abyDestination[1] = 16#01&#xD;&#xA;        abyDestination[2] = 16#00&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;&#xD;&#xA;     The size of the ARRAY &quot;abyDestination&quot; has to be adjusted to the amount of bits copied! Source and target may not overlap! &#xD;&#xA;&#xD;&#xA; :return: functon returns the necessary number of bytes in &quot;abyDestination&quot;" ObjectGUID="{afc2ab34-6c6e-4d88-82f3-fd7b887dee7e}" />
  <Node Name="MemMove" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" The function copies the amount of &quot;uiNumberOfBytes&quot; of memory from memory area&#xD;&#xA; &quot;Source&quot; to &quot;Destination&quot;, wheras these memory areas are allowed to overlap! &#xD;&#xA; In case of success, the function will return “TRUE”.&#xD;&#xA; Only if &quot;Source&quot; or &quot;Destination&quot; are set to &quot;0&quot; the copying will not be&#xD;&#xA; carried out and the function will return “FALSE”.&#xD;&#xA;&#xD;&#xA; :return: function return &quot;TRUE&quot; if the moving of bytes succeeded" ObjectGUID="{0fc91a02-f0cb-4511-a368-48b13c46e18b}" />
  <Node Name="MemFill" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function fills all bytes of a memory block with the value &quot;byFillValue&quot;.&#xD;&#xA; In case of success, the function will return “TRUE”. Only if &quot;MemoryBlock&quot; is set to &quot;0&quot;,&#xD;&#xA; the initialization will not be carried out and the function will return &quot;FALSE&quot;.&#xD;&#xA;&#xD;&#xA; :return: function returns &quot;TRUE&quot; if filling succeeded" ObjectGUID="{c08cbe8c-9de6-4e35-8745-813512f86188}" />
  <Node Name="Encode" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function encodes &quot;Source&quot; (ARRAY OF DWORD) into &quot;Destination&quot; (ARRAY OF BYTE), meaning 1 DWORD is split up into 4 BYTEs. Assumes &quot;uiNumberOfBytes&quot; is&#xD;&#xA; a multiple of 4, whereas if it is not &quot;FALSE&quot; is returned.&#xD;&#xA;&#xD;&#xA; :return: function returns &quot;TRUE&quot; if encoding succeeded" ObjectGUID="{c5ca7609-0418-4eb4-bed2-1c7e68ee1724}" />
  <Node Name="Decode" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function decodes &quot;Source&quot; (ARRAY OF BYTE) into &quot;Destination&quot; (ARRAY OF DWORD), meaning 4 BYTEs are decoded into 1 DWORD. Assumes &quot;uiNumberOfBytes&quot; is&#xD;&#xA; a multiple of 4, whereas if it is not &quot;FALSE&quot; will be returned.&#xD;&#xA;&#xD;&#xA; :return: function returns &quot;TRUE&quot; if decoding succeded" ObjectGUID="{fcf46b2b-e632-45b8-8cb3-5aa0e8d8de19}" />
  <Node Name="MD5_Transform" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" MD5 basic transformation. Transform state according to first 64 bytes at Buffer." ObjectGUID="{e455b59f-d2e9-46bf-b297-4f2ac7eea2f2}" />
  <Node Name="MD5_II" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" MD5 transformations for rounds 1, 2, 3, and 4." ObjectGUID="{977ba79e-dd2d-4365-9f29-9d1c68e2643e}" />
  <Node Name="MD5_HH" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" MD5 transformations for rounds 1, 2, 3, and 4." ObjectGUID="{2259f7ee-e021-4dd3-bf25-3cc5dd57670d}" />
  <Node Name="MD5_GG" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" MD5 transformations for rounds 1, 2, 3, and 4." ObjectGUID="{eb51f8e8-fd5f-4c27-b286-4ba50b1917f6}" />
  <Node Name="MD5_FF" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" MD5 transformations for rounds 1, 2, 3, and 4." ObjectGUID="{9db35e08-b1d3-47d6-94e6-37a8903bb1b3}" />
  <Node Name="MD5" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function calculates the MD5 checksum of given &quot;MemoryBlock&quot; with &quot;udiNumberOfBytes&quot; bytes.&#xD;&#xA; The used algorithm of MD5 Message-Digest  is descibed in RFC1321.&#xD;&#xA;&#xD;&#xA; Prefix: &quot;memmd5&quot;.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        sTest : string := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'&#xD;&#xA;        -&gt;&#xD;&#xA;        abyDigest[0] = 16#D1&#xD;&#xA;        abyDigest[1] = 16#74&#xD;&#xA;        abyDigest[2] = 16#AB&#xD;&#xA;        abyDigest[3] = 16#98&#xD;&#xA;        abyDigest[4] = 16#D2&#xD;&#xA;        abyDigest[5] = 16#77&#xD;&#xA;        abyDigest[6] = 16#D9&#xD;&#xA;        abyDigest[7] = 16#F5&#xD;&#xA;        abyDigest[8] = 16#A5&#xD;&#xA;        abyDigest[9] = 16#61&#xD;&#xA;        abyDigest[10] = 16#1C&#xD;&#xA;        abyDigest[11] = 16#2C&#xD;&#xA;        abyDigest[12] = 16#9F&#xD;&#xA;        abyDigest[13] = 16#41&#xD;&#xA;        abyDigest[14] = 16#9D&#xD;&#xA;        abyDigest[15] = 16#9F" ObjectGUID="{6d80c3d6-909e-4949-b41c-598a12921cfa}">
    <Node Name="Update" TypeGUID="{8ac092e5-3128-4e26-9e7e-11016c6684f2}" EmbeddedTypeGUIDs="{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{fe2ebf67-d73a-4ab2-8509-579cc828baa9}" />
    <Node Name="Init" TypeGUID="{8ac092e5-3128-4e26-9e7e-11016c6684f2}" EmbeddedTypeGUIDs="{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{e4db3891-c262-4ee5-9a26-50fd0019af91}" />
    <Node Name="Finale" TypeGUID="{8ac092e5-3128-4e26-9e7e-11016c6684f2}" EmbeddedTypeGUIDs="{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{54e29b63-bf4c-40f6-99bc-9135d6b81d09}" />
  </Node>
  <Node Name="CRC32" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function calculates the CRC32 checksum used in PKZIP, AUTODIN II, Ethernet, FDDI.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        sTest : STRING(10) := '123456789' ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.CRC32(ADR(sTest), 9) = 16#CBF43926&#xD;&#xA;&#xD;&#xA; :return: function returns the CRC32 checksum of &quot;MemoryBlock&quot;" ObjectGUID="{2cb6fa46-27da-4479-b2b2-e0996baf6175}" />
  <Node Name="CRC16_standard" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function calculates the default CRC16 checksum.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        sTest : STRING(10) := '123456789' ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.CRC16_standard(ADR(sTest), 9) = 16#BB3D&#xD;&#xA;&#xD;&#xA; :return: function returns the default CRC16 checksum of &quot;MemoryBlock&quot;" ObjectGUID="{374cdf6e-f481-4d58-bcb1-5de826efbcee}" />
  <Node Name="CRC16_generic" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function calculates the checksum CRC16 of the &quot;MemoryBlock&quot; in a generalized manner.&#xD;&#xA;&#xD;&#xA; Typical input parameter:&#xD;&#xA;&#xD;&#xA;     + CRC16 standard :&#xD;&#xA;&#xD;&#xA;            - wCRCInit := 16#0000&#xD;&#xA;            - wPoly := 16#8005&#xD;&#xA;            - xReflectInput := TRUE&#xD;&#xA;            - xReflectOutput := TRUE&#xD;&#xA;            - wXORout := 16#0000&#xD;&#xA;&#xD;&#xA;     + CRC16-CCITT :&#xD;&#xA;&#xD;&#xA;            - wCRCInit := 16#FFFF&#xD;&#xA;            - wPoly := 16#1021&#xD;&#xA;            - xReflectInput := FALSE&#xD;&#xA;            - xReflectOutput := FALSE&#xD;&#xA;            - wXORout := 16#0000&#xD;&#xA;&#xD;&#xA;     + CRC16-Modbus :&#xD;&#xA;&#xD;&#xA;            - wCRCInit := 16#FFFF&#xD;&#xA;            - wPoly := 16#8005&#xD;&#xA;            - xReflectInput := TRUE&#xD;&#xA;            - xReflectOutput := TRUE&#xD;&#xA;            - wXORout := 16#0000&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        sTest : STRING(10) := '123456789' ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.CRC16_generic(ADR(sTest),9,16#1021, FALSE, FALSE, 16#0000) = 16#29B1&#xD;&#xA;&#xD;&#xA; :return: function returns generalized CRC16 of &quot;MemoryBlock&quot;" ObjectGUID="{72a86a8c-9fe8-4c4f-9d53-8b91d5c688c4}" />
  <Node Name="CRC16_Modbus" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function calculates the Modbus CRC16 checksum. Deviating from the initial value generally used the check sum will be initialized with 16#FFFF.&#xD;&#xA;&#xD;&#xA; Example: &#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        sTest : STRING(10) := '123456789' ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.CRC16_Modbus(ADR(sTest), 9) = 16#4B37&#xD;&#xA;&#xD;&#xA; :return: function returns the Modbus CRC16 checksum of &quot;MemoryBlock&quot;" ObjectGUID="{85a3dcd6-ba32-4949-8500-0b95f55aa2e1}" />
  <Node Name="CRC16_CCITT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function calculates the checksum CRC16-CCITT.&#xD;&#xA;&#xD;&#xA; Example:&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;        sTest : STRING(10) := '123456789' ;&#xD;&#xA;        -&gt;&#xD;&#xA;        MEM.CRC16_CCITT(ADR(sTest), 9) = 16#29B1&#xD;&#xA;&#xD;&#xA; :return: function returns the CRC16-CCITT checksum of &quot;MemoryBlock&quot;" ObjectGUID="{b6fc4421-b74c-4983-9f65-5d233f47bb16}" />
  <Node Name="simple TYPE" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{1dabaad3-140a-435e-a045-c2506a442479}" />
  <Node Name="ARRAY and MemoryBlock" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{23252dc1-da85-4519-a29f-9ff4a011606b}" />
  <Node Name="Reverse Bit, Swap Byte,Word order" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{b0aca45b-f706-4b98-8fa9-0bb3c55879fc}" />
  <Node Name="Packing" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{fa7d5897-7346-4bd0-b0de-f9347307f934}" />
  <Node Name="Manipulation" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{4d5edf6e-9639-4f2b-a68f-f1219f3eb74d}" />
  <Node Name="Internal functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{e8dfe483-42dd-4ebb-8fab-65c1f2bcb607}" />
  <Node Name="Checksum" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{299fc49c-9832-4500-9909-d89761f5aa67}" />
  <Node Name="Analysis" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{c0d1689c-0a7f-4a31-a11d-fe6e30831cb8}" />
  <Node Name="VersionConstants" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{4f45b71d-d6ae-40c5-a5a1-ceab02846669}" />
  <Node Name="Project information" TypeGUID="{085afe48-c5d8-4ea5-ab0d-b35701fa6009}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{11c0fc3a-9bcf-4dd8-ac38-efb93363e521}" />
  <Node Name="Project Settings" TypeGUID="{8753fe6f-4a22-4320-8103-e553c4fc8e04}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6470a90f-b7cb-43ac-9ae5-94b2338b4573}" />
  <Node Name="Library Manager" TypeGUID="{adb5cb65-8e1d-4a00-b70a-375ea27582f3}" EmbeddedTypeGUIDs="" ObjectGUID="{bc9792a0-23e9-461e-bcee-9ffa6e89385d}" />
  <Node Name="GetSupplierVersion" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function returns the supplier version of this library.&#xD;&#xA; High byte contains the release version.&#xD;&#xA; Low byte contains the version of implementation.&#xD;&#xA;&#xD;&#xA; :return: function returns the supplier version of this library in form of a WORD" ObjectGUID="{7217a553-0e43-43bb-924c-387ea044f17e}" />
  <Node Name="CAA_Memory" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{7be85835-d9ca-4b3e-844f-eab3aac6d89f}" />
</Library>