<?xml version="1.0" encoding="utf-8"?>
<Library Name="Util, 3.5.7.0 (System)">
  <Node Name="GEN" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" function block for generating some periodic functions " ObjectGUID="{59edc680-72f3-4600-9006-fe9ac4fd1ac4}" />
  <Node Name="FREQ_MEASURE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" FB to measure the frequency of a signal " ObjectGUID="{1666c726-ba2c-4093-bd39-263c854af6e1}" />
  <Node Name="BLINK" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function block to simulate a turn signal " ObjectGUID="{8fa589b9-7aac-4bf3-82e0-7d0c0d3f218d}" />
  <Node Name="VARIANCE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" function block to calculate the mathematical variance of a variable" ObjectGUID="{09f5a8fd-63b4-4d0e-9c82-54be9f89f412}" />
  <Node Name="STATISTICS_REAL" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" function block for statistics: calculating minimum, maximum and average of an input value " ObjectGUID="{6a3b78e1-4e0c-43e0-9485-dce10203d019}" />
  <Node Name="STATISTICS_INT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" function block for statistics: calculating minimum, maximum and average of an input value " ObjectGUID="{80b86871-8332-443e-b530-2fae576b5985}" />
  <Node Name="LIN_TRAFO" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" linear transformation " ObjectGUID="{184920e2-ed81-4a18-9dca-9242894cd587}" />
  <Node Name="INTEGRAL" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Function block to approximate the integral of ``IN`` over the time " ObjectGUID="{f226dda4-9940-4f5d-a8ca-cc918f34bf32}" />
  <Node Name="DERIVATIVE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block to approximate the derivative of a value. &#xD;&#xA; To calculate this, always four values are used in order to be as exact as possible. " ObjectGUID="{1b44c2a7-eaea-45b2-bf7c-68ec0123a155}" />
  <Node Name="WORD_AS_STRING" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" The output value of String is the ASCII value of Input given in ``WORD`` format. &#xD;&#xA; *&#xD;&#xA; * **Example:**&#xD;&#xA; * &#xD;&#xA; * | Input: '16#4846'&#xD;&#xA; * | Byte Order: FALSE&#xD;&#xA; * |&#xD;&#xA; * | String: 'HF'&#xD;&#xA; " ObjectGUID="{3492b16e-1252-4b73-a36f-472feabda9c5}" />
  <Node Name="HEXinASCII_TO_BYTE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function converts one WORD of ASCII value of HEX code to one BYTE representing its binary code.&#xD;&#xA; * The higher byte in the input represents the higher bits in the output.&#xD;&#xA; * Use |BYTE_TO_HEXinASCII| Function for the reverse process.&#xD;&#xA; " ObjectGUID="{924491cb-61a0-4fce-9ce1-0c7c9d0f42a8}" />
  <Node Name="BYTE_TO_HEXinASCII" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function converts one ``BYTE`` of binary code to one ``WORD`` representing its ASCII value of HEX code.&#xD;&#xA; * The higher bits in the input are represented by the higher byte in the output.&#xD;&#xA; * Use |HEXinASCII_TO_BYTE| Function for the reverse process.&#xD;&#xA; " ObjectGUID="{4dd633ab-73eb-48bf-852f-bdee86ebd748}" />
  <Node Name="WORD_TO_GRAY" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function converts one ``WORD`` of binary code to one ``WORD`` of GRAY code" ObjectGUID="{1302a586-c2ef-41d7-b37e-3aa894052059}" />
  <Node Name="GRAY_TO_WORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function converts one ``WORD`` of GRAY code to one ``WORD`` of binary code&#xD;&#xA;  Requirements		:	functions:	PUTBIT, EXTRACT " ObjectGUID="{b37b6f4b-da7d-45d9-afba-a525a41a2e9a}" />
  <Node Name="GRAY_TO_DWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function converts one ``DWORD`` of GRAY code to one ``DWORD`` of binary code&#xD;&#xA;  Requirements		:	functions:	PUTBIT, EXTRACT " ObjectGUID="{282240ee-b9a3-46ad-a1fc-00e088fa145c}" />
  <Node Name="GRAY_TO_BYTE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function converts one ``BYTE`` of GRAY code to one ``BYTE`` of binary code&#xD;&#xA;  Requirements		:	functions:	PUTBIT, EXTRACT " ObjectGUID="{91a6f8af-4997-4f6f-b333-95fdd1d719bc}" />
  <Node Name="DWORD_TO_GRAY" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function converts one ``DWORD`` of binary code to one ``DWORD`` of GRAY code " ObjectGUID="{da702ce7-200f-465e-b0cd-8a307a7a7aa0}" />
  <Node Name="BYTE_TO_GRAY" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function converts one ``BYTE`` of binary code to one ``BYTE`` of GRAY code " ObjectGUID="{d137b7e7-9edc-47bf-adb0-ab40adb9150e}" />
  <Node Name="RAMP_REAL" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block to limit the slope of a value to a certain value " ObjectGUID="{318abaaf-c46c-4938-a680-1c1a12f5fa77}" />
  <Node Name="RAMP_INT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block to limit the slope of a value to a certain value " ObjectGUID="{4b48bd44-b631-4d77-a8e7-0acdb1b88d74}" />
  <Node Name="CHARCURVE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block to map an input signal on a characteristic curve " ObjectGUID="{5259d0e0-41cc-48c5-ab03-345a809739a7}" />
  <Node Name="BASE64" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" | A textblock (string, binary, array of bytes) will be base64 encoded. The maximum of the block is set in the |TextBlockSize| Parameter. &#xD;&#xA; *   This size can be changed but must be divisible through three.&#xD;&#xA; * | When the text block is only a part of a text and followed by more text, the size must be TextBlockSize.iBlockSize and&#xD;&#xA; *   the isLastBlock variable must be set to false. When a text is not followed by another block the specific length&#xD;&#xA; *   of it must be used and &quot;isLastBlock&quot; has to be set to FALSE, as can be seen in the following example. The reason is&#xD;&#xA; *   three 8-bit letters will become four 6-bit letters. When only two 8-bit letters are remaining at the end, the encoded text is&#xD;&#xA; *   filled with &quot;=&quot;. This must only be at the end of a text.&#xD;&#xA; *&#xD;&#xA; * The function returns a structure with a pointer to the text and its size.&#xD;&#xA; *&#xD;&#xA; * **Example:**&#xD;&#xA; * &#xD;&#xA; * .. code-block:: codesys&#xD;&#xA; * &#xD;&#xA; *    StringToConvert : PT_SIZE;&#xD;&#xA; *    EncodedString	  : PT_SIZE;&#xD;&#xA; *    byError 		  : BYTE;&#xD;&#xA; *    sText			  : STRING := 'This is a test string.';&#xD;&#xA; *&#xD;&#xA; *    StringToConvert.uiSize := LEN(sText); (* When another block follows, use the size TextBlockSize.iBlockSize&#xD;&#xA; *                                             and set isLastBlock to FALSE. *)&#xD;&#xA; *    StringToConvert.pString := ADR(sText);&#xD;&#xA; *    EncodedString := Base64(TextToEncode := StringToConvert, isLastBlock := TRUE, pbyError := ADR(byError));&#xD;&#xA; " ObjectGUID="{986fa3f1-6677-4f7e-98a0-f2647fc0a927}" />
  <Node Name="PT_SIZE" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{9738f38e-7791-4f0e-be82-c6e361533c57}" />
  <Node Name="POINT" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{52861de0-1ba5-4d80-9fc6-305c4bfd6538}" />
  <Node Name="GEN_MODE" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{1ae7bd22-d6df-4909-8c28-f1c5254d3259}" />
  <Node Name="PID_FIXCYCLE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" PD controller " ObjectGUID="{a17a5ef0-b1a7-4402-8011-c79d530c1baf}" />
  <Node Name="PID" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" PD controller " ObjectGUID="{e941967d-f225-4b3b-aeac-7276bba503fe}" />
  <Node Name="PD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" PD controller " ObjectGUID="{d0a656d4-db57-497c-9427-23e14b125a43}" />
  <Node Name="TextBlockSize" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{035ec67f-e3be-42cd-a192-ca96f1d06fc4}" />
  <Node Name="GVL_Const" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" IsHidden="true" ObjectGUID="{8c59da37-9c6f-4540-af82-a14efb89e5a6}" />
  <Node Name="WORD_AS_BIT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This Function block converts an input value of data type ``WORD`` to 16 outputs of data type ``BOOL``. " ObjectGUID="{897c09c8-d965-4d5a-a4e5-060c4b2be753}" />
  <Node Name="UNPACK" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block unpacks ``BYTE`` into 8 bits " ObjectGUID="{22605d08-bad4-4abf-bc7e-0e85ea9d36e2}" />
  <Node Name="SWITCHBIT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" | This function switches one bit specified by ``N`` in the given ``X`` Input.&#xD;&#xA; * | The bits are counted from low to high starting with 0.&#xD;&#xA; * | Valid range: 0..31&#xD;&#xA; * | See also: |PUTBIT| and |EXTRACT|.&#xD;&#xA; " ObjectGUID="{448bc13e-7473-4212-88b0-ac13c5490b8e}" />
  <Node Name="PUTBIT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function sets bit ``N`` of ``X`` to ``B`` and returns the new value " ObjectGUID="{d2452349-3375-43ac-86fc-d6ec5a6d7c1d}" />
  <Node Name="PACK" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Pack eight bits into 1 byte " ObjectGUID="{60011a55-58a1-4375-82c8-9716fb42734e}" />
  <Node Name="EXTRACT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function returns Bit ``N`` of value ``X`` " ObjectGUID="{6f29d570-9ea3-481c-b257-71194427dc35}" />
  <Node Name="DWORD_AS_BIT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This Function block converts an input value of data type ``DWORD``  to 32 outputs of data type ``BOOL``. " ObjectGUID="{bfea84eb-db90-4666-b36d-302b860eb07d}" />
  <Node Name="BYTE_AS_BIT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block unpacks ``BYTE`` into 8 bits " ObjectGUID="{3c95f4be-5c59-41c0-99a1-9363a649babc}" />
  <Node Name="BIT_AS_WORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block converts 16 input values of data type ``BOOL`` to an equivalent output value of the ``WORD`` data type. " ObjectGUID="{1212aca9-24cc-40ae-9998-7c0ad055cf8d}" />
  <Node Name="BIT_AS_DWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block converts 32 input values of data type ``BOOL`` to an equivalent output value of the &quot;DWORD&quot; data type. " ObjectGUID="{a77c633d-cb94-4df2-8b0d-781d227f66f6}" />
  <Node Name="BIT_AS_BYTE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block converts 8 input values of data type ``BOOL`` to an equivalent output value of the ``BYTE`` data type. " ObjectGUID="{a95cc910-4056-4aae-b2db-f5ec45dce332}" />
  <Node Name="WORD_TO_BCD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" | This function converts one ``WORD`` value in the range of 0..9999 to one ``WORD`` representing its BCD value.&#xD;&#xA; * | use |BCD_TO_WORD| for the reverse process.&#xD;&#xA; " ObjectGUID="{a39ecbce-3f4a-4bd4-872c-6fc4982f1e5a}" />
  <Node Name="INT_TO_BCD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function reads ``INT`` and returns its BCD value; a wrong ``INT`` value (&lt;0 or &gt;99) causes a return of 255 " ObjectGUID="{ae5efc10-77ed-4919-8afb-375549409502}" />
  <Node Name="DWORD_TO_BCD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" | This function converts one ``DWORD`` value in the range of 0..9999 to one ``DWORD`` representing its BCD value.&#xD;&#xA; * | Use |BCD_TO_DWORD| for the reverse process.&#xD;&#xA; " ObjectGUID="{0b3349ae-e762-4047-85a0-a739dc1d9d36}" />
  <Node Name="BYTE_TO_BCD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" | This function converts one ``BYTE`` value in the range OF 0..99 To one ``BYTE`` representing its BCD value.&#xD;&#xA; * | Use |BCD_TO_BYTE| for the reverse process.&#xD;&#xA; " ObjectGUID="{d177f42b-1d89-42a2-bc5b-9e677f20d487}" />
  <Node Name="BCD_TO_WORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" | This function converts one ``WORD`` of BCD code to its representation as binary ``WORD``.&#xD;&#xA; * | Use |WORD_TO_BCD| for the reverse process.&#xD;&#xA; " ObjectGUID="{95accc3c-7bfd-46b4-9931-ecee8a59d854}" />
  <Node Name="BCD_TO_INT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function converts a byte in BCD format into an ``INT`` value:&#xD;&#xA; * The input value of the function is type ``BYTE`` and the output is type ``INT``. &#xD;&#xA; * Where a byte should be converted which is not in the BCD format the output is -1.&#xD;&#xA; * &#xD;&#xA; * Example in ST:&#xD;&#xA; * &#xD;&#xA; * .. code-block:: codesys&#xD;&#xA; *&#xD;&#xA; *    i := BCD_TO_INT(73);  (* Result is 49 *) &#xD;&#xA; *    k := BCD_TO_INT(151); (* Result is 97 *) &#xD;&#xA; *    l := BCD_TO_INT(15);  (* Output -1, because it is not in BCD format *) &#xD;&#xA; " ObjectGUID="{be462891-8d10-4fe0-aacd-0b80f9a0c863}" />
  <Node Name="BCD_TO_DWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" | This function converts one ``DWORD`` of BCD code to its representation as binary ``DWORD``.&#xD;&#xA; * | Use |DWORD_TO_BCD| for the reverse process.&#xD;&#xA; " ObjectGUID="{af3fefdc-914f-4bd4-8514-5fdc819ea503}" />
  <Node Name="BCD_TO_BYTE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" | This function converts one ``BYTE`` of BCD code to its representation as binary ``BYTE``.&#xD;&#xA; * | Use |BYTE_TO_BCD| for the reverse process.&#xD;&#xA; " ObjectGUID="{cc40263c-63ca-4cf4-91d6-2da8f5fd78a0}" />
  <Node Name="LIMITALARM" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block monitoring, whether the input value ``IN`` lies between ``LOW`` and ``HIGH`` " ObjectGUID="{a1075d18-c2d1-4a0c-bb92-5d8e98bcf364}" />
  <Node Name="HYSTERESIS" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block, which sets ``OUT`` to ``TRUE``, if input ``IN`` is less than ``LOW``, and which sets ``OUT`` to ``FALSE``, if input ``IN`` is bigger than ``HIGH`` " ObjectGUID="{ce7b647a-934c-4ea4-83b9-9579349dbaf0}" />
  <Node Name="Signals" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6e821949-5b17-4dfa-84e2-96661655aec6}" />
  <Node Name="Project Settings" TypeGUID="{8753fe6f-4a22-4320-8103-e553c4fc8e04}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6470a90f-b7cb-43ac-9ae5-94b2338b4573}" />
  <Node Name="Project Information" TypeGUID="{085afe48-c5d8-4ea5-ab0d-b35701fa6009}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{11c0fc3a-9bcf-4dd8-ac38-efb93363e521}" />
  <Node Name="Mathematical Functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{bcf095b0-c25c-4b5f-b590-d63f92d38314}" />
  <Node Name="Libraries" TypeGUID="{adb5cb65-8e1d-4a00-b70a-375ea27582f3}" EmbeddedTypeGUIDs="" ObjectGUID="{cc861807-6685-4501-b7ad-78b00b3f2246}" />
  <Node Name="HEX/ASCII Functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{b7e419e6-4e5c-4d69-99d0-d8f4f515a6a8}" />
  <Node Name="Gray Conversions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{2869bc09-b23f-4d98-a4c2-c605f525f298}" />
  <Node Name="Function Manipulators" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{ea66b900-4f7b-4df9-816b-4090b10d5bdb}" />
  <Node Name="Encoding" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{ac8b06de-918b-48f6-9d73-0423e79c5b2f}" />
  <Node Name="Datatypes" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{8c778f0a-b93f-4a16-9187-c56c51176ed8}" />
  <Node Name="Controller" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{8589a4b4-618e-4f85-93c2-75014a14ad35}" />
  <Node Name="Constants" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{98719b65-3cf8-4e55-a755-9209fd79426a}" />
  <Node Name="Bit/Byte Functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{12a6f1e6-06c8-4f2b-bb8a-f2126dec0c71}" />
  <Node Name="BCD Conversions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{787fcfe1-5d17-465f-9f95-b84071b8b6f0}" />
  <Node Name="Analog Monitors" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{934f4542-685f-46f2-af4c-9e4b61e797bd}" />
</Library>