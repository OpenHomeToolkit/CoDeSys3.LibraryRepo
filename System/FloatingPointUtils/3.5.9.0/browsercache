<?xml version="1.0" encoding="utf-8"?>
<Library Name="FloatingPointUtils, 3.5.9.0 (System)">
  <Node Name="help functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{e55b1215-1d29-4ccf-9630-a26b4c942ca0}" />
  <Node Name="UnitTests" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6a63be8a-01d5-499a-8f5d-6ed7551c8de8}" />
  <Node Name="Timing" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{2d57247d-c0e2-4739-93a8-6af9cf8ec74d}" />
  <Node Name="StrToReal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts a string to a REAL value, taking into account&#xD;&#xA; the special values 'NaN', '+Inf', and '-Inf'.&#xD;&#xA; Based on STRING_TO_REAL." ObjectGUID="{b79edf86-1e09-482e-a427-4151877cd287}" />
  <Node Name="StrToLReal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts a string to an LREAL value, taking into account&#xD;&#xA; * the special values 'NaN', '+Inf', and '-Inf'.&#xD;&#xA; * Based on STRING_TO_LREAL.&#xD;&#xA; *&#xD;&#xA; * .. note:: This function also handles the case LREAL = REAL. " ObjectGUID="{8a3f108c-6177-43eb-863b-edfd6da5f7aa}" />
  <Node Name="RealToStr" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts REAL values to a decimal representation, taking&#xD;&#xA; into account special values like NaN and infinity.&#xD;&#xA; Based on REAL_TO_STRING." ObjectGUID="{450f74f2-86a9-4457-89e3-52bc39cbdf52}" />
  <Node Name="RealToHexStr" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts a REAL value to a HexReal-string.&#xD;&#xA; * See SerializeHexReal for a description of the format. " ObjectGUID="{f4441d7a-87a1-4220-9357-b198daf5bd42}" />
  <Node Name="LRealToStr" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts LREAL values to a decimal representation, taking&#xD;&#xA; * into account special values like NaN and infinity.&#xD;&#xA; * Based on LREAL_TO_STRING.&#xD;&#xA; *&#xD;&#xA; * .. note:: This function also handles the case LREAL = REAL. " ObjectGUID="{3cd84201-48f3-4564-88c4-ccda3c35cf56}" />
  <Node Name="LRealToHexStr" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts a LREAL value to a HexReal-string.&#xD;&#xA; * See SerializeHexReal for a description of the format.&#xD;&#xA; *&#xD;&#xA; * .. note:: This function also handles the case LREAL = REAL. " ObjectGUID="{0edeb06d-1498-4c7a-8d4f-9d3ef5aa854a}" />
  <Node Name="HexStrToReal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts a HexReal-string to a REAL value.&#xD;&#xA; * See DeserializeHexReal for a description of the format. " ObjectGUID="{0abbe133-c0ed-43dd-b01e-b3846c8b46e8}" />
  <Node Name="HexStrToLReal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts a HexReal-string to a LREAL value.&#xD;&#xA; * See DeserializeHexReal for a description of the format.&#xD;&#xA; *&#xD;&#xA; * .. note:: This function also handles the case LREAL = REAL. " ObjectGUID="{3bd32226-4ba2-4b98-bf03-7837ad2079a1}" />
  <Node Name="IsRealPosInfinity" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns whether the given REAL value is a special positive infinity&#xD;&#xA; value." ObjectGUID="{9e3dfbdc-6108-416d-a07e-b83ff53c916e}" />
  <Node Name="IsRealNumber" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns whether the given REAL value is a regular number&#xD;&#xA; and not a special NaN or infinity value." ObjectGUID="{88573342-1c99-4928-9f10-ddaaa0bc5781}" />
  <Node Name="IsRealNegInfinity" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns whether the given REAL value is a special negative infinity&#xD;&#xA; value." ObjectGUID="{3f6ba529-66cf-4fb0-a0c7-4034ecaf943f}" />
  <Node Name="IsRealNaN" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns whether the given REAL value is a special NaN&#xD;&#xA; (not a number) value." ObjectGUID="{9ba43018-44a1-4c5a-b904-68538d894d84}" />
  <Node Name="GetRealSpecialVal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns one of the predefined special REAL values." ObjectGUID="{e20afe48-8050-440f-932e-97e49e6af2de}" />
  <Node Name="ExtractRealRaw" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Extracts the components of a REAL floating point number without&#xD;&#xA; interpreting them.&#xD;&#xA; Extracts the sign, (biased) exponent, and mantissa of a REAL value.&#xD;&#xA; We assume the IEEE 754 binary32 format.&#xD;&#xA; All values, including NaN and Infinity are supported.&#xD;&#xA; See http://en.wikipedia.org/wiki/Single_precision_floating-point_format" IsHidden="true" ObjectGUID="{83568e42-640c-4475-864a-cb47b4d91d20}" />
  <Node Name="ExtractReal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Extracts the components of a REAL floating point number and&#xD;&#xA; converts them into a (signed) mantissa and a (signed) exponent.&#xD;&#xA; To this end, the implicit bit 24 of the mantissa is set and the&#xD;&#xA; exponent bias is subtracted.&#xD;&#xA; The exponent is computed such that f = diM * 2^iE, except if f is NaN&#xD;&#xA; or Infinity, see the documentation of the outputs.&#xD;&#xA; See http://en.wikipedia.org/wiki/Single_precision_floating-point_format" IsHidden="true" ObjectGUID="{7256ec16-0bed-4da6-8527-765cf67fc4a1}" />
  <Node Name="ComposeRealRaw" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Composes a REAL value from the sign, (biased) exponent, and (raw) mantissa.&#xD;&#xA; We assume the IEEE 754 binary32 format.&#xD;&#xA; All values, including NaN and Infinity are supported.&#xD;&#xA; See http://en.wikipedia.org/wiki/Single_precision_floating-point_format" IsHidden="true" ObjectGUID="{74e7f947-e514-4674-8446-6f71eec55249}" />
  <Node Name="ComposeReal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Composes a REAL value from (signed) exponent, and signed mantissa.&#xD;&#xA; We assume the IEEE 754 binary32 format.&#xD;&#xA; Returns TRUE iff no overflow occurs.&#xD;&#xA; See http://en.wikipedia.org/wiki/Single_precision_floating-point_format" IsHidden="true" ObjectGUID="{7b1cdd3e-914c-4900-a7a7-78a710411b5b}" />
  <Node Name="IsLRealPosInfinity" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns whether the given LREAL value is a special positive infinity&#xD;&#xA; value." ObjectGUID="{df136183-0e00-4819-b6a5-823d5e881eee}" />
  <Node Name="IsLRealNumber" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns whether the given LREAL value is a regular number&#xD;&#xA; and not a special NaN or infinity value." ObjectGUID="{8ed183c1-4e29-43a6-958b-736fe5018e67}" />
  <Node Name="IsLRealNegInfinity" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns whether the given LREAL value is a special negative infinity&#xD;&#xA; value." ObjectGUID="{631473c2-816e-4cf1-9af1-8e713d8eaa13}" />
  <Node Name="IsLRealNaN" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns whether the given LREAL value is a special NaN&#xD;&#xA; (not a number) value." ObjectGUID="{6c48dc4e-9e04-487b-beb4-fd25cc324fe5}" />
  <Node Name="GetLRealSpecialVal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns one of the predefined special LREAL values." ObjectGUID="{7c7ab719-9f1b-48e9-a07b-124053e34958}" />
  <Node Name="FloorTest" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns the greatest integral value that is not greater than f. &#xD;&#xA;   Test implementation to compare against Floor.&#xD;&#xA;   Note: this function must not be called with the special values&#xD;&#xA;   NaN or infinity. " IsHidden="true" ObjectGUID="{74d76dd3-6d4f-44fc-9311-1dc7d6101f61}" />
  <Node Name="ExtractLRealRaw" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Extracts the components of a LREAL floating point number without&#xD;&#xA; interpreting them.&#xD;&#xA; Extracts the sign, (biased) exponent, and mantissa of a REAL value.&#xD;&#xA; We assume the IEEE 754 binary64 format.&#xD;&#xA; All values, including NaN and Infinity are supported.&#xD;&#xA; See http://en.wikipedia.org/wiki/Double_precision_floating-point_format" IsHidden="true" ObjectGUID="{7bbdcbbd-261f-4cba-8995-b1e83783ce8c}" />
  <Node Name="ExtractLReal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Extracts the components of an LREAL floating point number and&#xD;&#xA; converts them into a (signed) mantissa and a (signed) exponent.&#xD;&#xA; To this end, the implicit bit 53 of the mantissa is set and the&#xD;&#xA; exponent bias is subtracted.&#xD;&#xA; The exponent is computed such that f = liM * 2^iE, except if f is NaN&#xD;&#xA; or Infinity, see the documentation of the outputs.&#xD;&#xA; See http://en.wikipedia.org/wiki/Double_precision_floating-point_format" IsHidden="true" ObjectGUID="{a903afeb-2563-42ff-8ebc-1b37199e9bfc}" />
  <Node Name="ComposeLRealRaw" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Composes a LREAL value from the sign, (biased) exponent, and (raw) mantissa.&#xD;&#xA; We assume the IEEE 754 binary64 format.&#xD;&#xA; All values, including NaN and Infinity are supported.&#xD;&#xA; See http://en.wikipedia.org/wiki/Double_precision_floating-point_format" IsHidden="true" ObjectGUID="{27003e2f-fdff-4279-abe5-5e077447a19e}" />
  <Node Name="ComposeLReal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Composes a LREAL value from (signed) exponent, and signed mantissa.&#xD;&#xA; We assume the IEEE 754 binary64 format.&#xD;&#xA; Returns TRUE iff no overflow occurs.&#xD;&#xA; See http://en.wikipedia.org/wiki/Double-precision_floating-point_format" IsHidden="true" ObjectGUID="{7c825500-6815-4250-9889-963c0448f724}" />
  <Node Name="ToHexNumeral" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{f0a028e2-d7e4-4ae8-8aa2-cf878bbb7c0c}" />
  <Node Name="SerializeHexReal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" | Converts a floating point number to the format&#xD;&#xA; * |    ``R16#{Mantissa}H{Exponent}``&#xD;&#xA; * | where both mantissa and exponent are hexadecimal numerals,&#xD;&#xA; *   such that liM * 2^iE  =  {Mantissa} * 16^{Exponent}.&#xD;&#xA; *&#xD;&#xA; * .. note::&#xD;&#xA; *      - If uE is zero, {Exponent} is set to 0, regardless of the value of uE.&#xD;&#xA; *      - The hexadecimal exponent is computed as floor(iE/4).  The hexadecimal&#xD;&#xA; *        mantissa then becomes liM * 2^(iE mod 4).&#xD;&#xA; *&#xD;&#xA; * See also DeSerializeHexReal. " ObjectGUID="{5fd68725-78ad-4ede-936c-07174cc60300}" />
  <Node Name="ScanHexNumeral" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{54bc1a29-4ad4-43b6-a6dd-30f9b18182ea}" />
  <Node Name="ScanConstI" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{12984d3a-d474-4cc1-96a6-6ecd1d0dc6ad}" />
  <Node Name="IsHexDig" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{32d6b4ae-0b00-4208-8223-04b459b5f82d}" />
  <Node Name="InsertStr" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{d9f5c8b8-b474-4458-99a2-ee3de5184705}" />
  <Node Name="HexDigVal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{51b31609-603c-4203-9c42-14aeeef36b18}" />
  <Node Name="DeserializeHexReal" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" | Converts a string of the format&#xD;&#xA; * |    R16#{Mantissa}H{Exponent} | R16#NaN | R16#+Inf | R16#-Inf&#xD;&#xA; * | where both mantissa and exponent are hexadecimal numerals,&#xD;&#xA; *   such that liM * 2^iE  =  {Mantissa} * 16^{Exponent}.&#xD;&#xA; *&#xD;&#xA; * Returns true on success and false if the format is invalid or&#xD;&#xA; * if an overflow occurred (i.e. when the mantissa does not fit into&#xD;&#xA; * an LINT or the exponent does not fit into an INT.)&#xD;&#xA; * &#xD;&#xA; * .. note::&#xD;&#xA; *      - Leading whitespace is not allowed.&#xD;&#xA; *      - Any characters that come after the hex real are ignored.&#xD;&#xA; * &#xD;&#xA; * See also SerializeHexReal. " ObjectGUID="{6e9d9658-400e-4257-b9da-82c7b2706f96}" />
  <Node Name="CharEqCI" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{abddba9e-53d0-4e22-bc64-30cad36e01cf}" />
  <Node Name="TruncateF" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Round to the next integral value, towards zero. &#xD;&#xA; If f is integral, infinity, or NaN, then f is returned. " ObjectGUID="{9197474e-24fa-456e-b3fa-a79e21c14a74}" />
  <Node Name="Truncate" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Round to the next integral value, towards zero.&#xD;&#xA; * if f is integral, infinity, or NaN, then f is returned.&#xD;&#xA; *&#xD;&#xA; * .. note:: This function also handles the case LREAL = REAL. " ObjectGUID="{7bc314de-9c31-4eb3-be53-d28c2e671241}" />
  <Node Name="FloorF" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns the greatest integral value that is not greater than f. &#xD;&#xA; If f is +0, -0, infinity, or NaN, then f is returned. " ObjectGUID="{c5dc6323-de49-49c2-b203-ec64d62f13b0}" />
  <Node Name="Floor" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns the greatest integral value that is not greater than f.&#xD;&#xA; * if f is +0, -0, infinity, or NaN, then f is returned.&#xD;&#xA; *&#xD;&#xA; * .. note:: This function also handles the case LREAL = REAL. " ObjectGUID="{35458ae5-7fe7-42ef-8e76-522d707b6632}" />
  <Node Name="CeilF" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns the smallest integral value that is not less than f. &#xD;&#xA; If f is +0, -0, infinity, or NaN, then f is returned. " ObjectGUID="{9e9a7b97-4a21-4f47-a3c1-c932deb1a806}" />
  <Node Name="Ceil" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns the smallest integral value that is not less than f. &#xD;&#xA; * If f is +0, -0, infinity, or NaN, then f is returned.&#xD;&#xA; *&#xD;&#xA; * .. note:: This function also handles the case LREAL = REAL. " ObjectGUID="{f6313f31-a279-4bcb-a95a-f953136f83f0}" />
  <Node Name="StringFunctions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{e24d3043-07ea-432f-bc94-345d6a48536b}" />
  <Node Name="REAL" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{352b380f-43ef-4647-aaee-c89f13027b25}" />
  <Node Name="Project Settings" TypeGUID="{8753fe6f-4a22-4320-8103-e553c4fc8e04}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6470a90f-b7cb-43ac-9ae5-94b2338b4573}" />
  <Node Name="Project Information" TypeGUID="{085afe48-c5d8-4ea5-ab0d-b35701fa6009}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{11c0fc3a-9bcf-4dd8-ac38-efb93363e521}" />
  <Node Name="LREAL" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{f47f08d1-7610-4b30-97da-846a997837a5}" />
  <Node Name="HexReal" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{f5806056-63dc-48ea-9e54-6bfafec90a5c}" />
  <Node Name="GVL" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" IsHidden="true" ObjectGUID="{e3f20eb9-0a96-457f-a7ed-c386fa4b0056}" />
  <Node Name="Functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{ea39fe4a-e998-4c49-b9ed-dfef39826c84}" />
  <Node Name="ESpecial_FP_Value" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Enumeration of special floating point values " ObjectGUID="{ccfe772f-e259-4c69-8412-7038f0c5941a}" />
</Library>