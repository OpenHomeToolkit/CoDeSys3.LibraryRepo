<?xml version="1.0" encoding="utf-8"?>
<Library Name="3S CANopenSafety, 3.5.9.0 (3S - Smart Software Solutions GmbH)">
  <Node Name="Operational" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{e5adc4ca-21ec-43b3-be74-a264e8b0dcff}" />
  <Node Name="CheckConfiguration and Stopped" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{5430b684-ae53-42e9-a724-a1623143658f}" />
  <Node Name="CheckConfiguration" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{77123bc5-8127-4df4-8a9b-94b98fa5ab8b}" />
  <Node Name="States" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6f4c84d1-88b9-4ddd-af96-94a5222cfef0}" />
  <Node Name="State Transitions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{15e2e07f-1fc9-4ecb-8f86-a267c7c270a9}" />
  <Node Name="Initialization" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6804ad8b-59c1-4376-85da-26ab0cdc81f2}" />
  <Node Name="ICmpIoDrv" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{bbb5766d-e6a7-476c-8654-980d2bbe53c3}" />
  <Node Name="IBase" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{aef9bbd6-a9a2-4dc6-a3d9-a58946b6930d}" />
  <Node Name="State Machine" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{e9da6b36-b804-4d78-a8a5-8723c637d653}" />
  <Node Name="Initialization" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{9ca1bcc3-2cca-4c37-9fe5-c104601cf5f1}" />
  <Node Name="Cyclic Methods (state independent)" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{56b0a138-fe36-49e7-a4e3-42254c1e8190}" />
  <Node Name="TXSRDO_SLAVE_CONFIG" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Structure which contains informations about unsafe and safe TXSRDO buffer.&#xD;&#xA; Used for setup of a CANRemoteDeviceSafe FB" IsHidden="true" ObjectGUID="{1f22f769-9c14-4e84-996a-fafa5ec9e220}" />
  <Node Name="RXSRDO_SLAVE_CONFIG" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Structure which contains informations about unsafe and safe RXSRDO buffer. &#xD;&#xA; Used for setup of a CANRemoteDeviceSafe FB" IsHidden="true" ObjectGUID="{cb4119fa-e1ad-4bd1-bc8d-ed77e5299365}" />
  <Node Name="GlobalConstants" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Global constants" IsHidden="true" ObjectGUID="{d42277c3-f8ce-4678-8b8f-1a270132da9a}" />
  <Node Name="CANopenManagerSIL2" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block implements a CANopen Safety SIL2 I/O driver.&#xD;&#xA; The safe I/O driver is realized through a black channel approach. The safe driver sits on top of an unsafe CANopen Stack.&#xD;&#xA; Communication is realized over a shared memory.&#xD;&#xA; The manager function block manages all instances of CANRemoteDeviceSafe." ObjectGUID="{53b4815b-da18-49ec-9d11-230b2cf2f640}">
    <Node Name="SetupSlaves" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Initialize all slaves&#xD;&#xA;&#xD;&#xA; Iterate over all safe slaves and register&#xD;&#xA; their instances to the CANopen Safety&#xD;&#xA; Master.&#xD;&#xA;&#xD;&#xA; Set the connector flags of the connector,&#xD;&#xA; corresponding to the slave to available,&#xD;&#xA; found and configured. (it becomes active,&#xD;&#xA; when the communication with the slave is&#xD;&#xA; running).&#xD;&#xA;&#xD;&#xA; Initialize the SRDOs, corresponding to&#xD;&#xA; this slave.&#xD;&#xA;&#xD;&#xA; Note, that this function makes&#xD;&#xA; no additional checks of pointer consistency.&#xD;&#xA; The IoMgr takes care about the validity&#xD;&#xA; of pointers and structures, passed to or &#xD;&#xA; used in this function.&#xD;&#xA;&#xD;&#xA; The following error codes may be returned:&#xD;&#xA;&#xD;&#xA; - ERR_OK: No errors occured.&#xD;&#xA;&#xD;&#xA; - ERR_FAILED: Failed to setup slaves.&#xD;&#xA;&#xD;&#xA; - ERR_BUFFERSIZE: Not enought buffer available.&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :pUnsafeConnector: [NULL,INVALID_UNSAFE_CONNECTOR,VALID_UNSAFE_CONNECTOR]&#xD;&#xA;     :nCount: [0..NUM_OF_UNSAFE_CONNECTORS]&#xD;&#xA;" IsHidden="true" ObjectGUID="{a17a38f5-48d5-4965-a11f-08e1750f17b0}" />
    <Node Name="RegisterSlave" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Add a slave to the list of managed slaves.&#xD;&#xA;&#xD;&#xA; The passed slave instance is enqueued in&#xD;&#xA; a single linked list of managed slaves.&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :pSlave: [INVALID_SLAVE,VALID_SLAVE]&#xD;&#xA;" IsHidden="true" ObjectGUID="{8fe833be-6d30-4057-be92-0eb1bad6baae}" />
    <Node Name="IoDrvUpdateConfiguration" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" IoDrvUpdateConfiguration is called on a new download or reset.&#xD;&#xA;&#xD;&#xA; Update or reset configuration&#xD;&#xA;&#xD;&#xA; This function is called when the I/O driver is&#xD;&#xA; initialized as well as when it is cleaned up.&#xD;&#xA;&#xD;&#xA; On cleanup, the parameter pConnectorList is zero.&#xD;&#xA;&#xD;&#xA; if pConnectorList is set unequal zero, the&#xD;&#xA; configuration is parsed, and all data structures&#xD;&#xA; are set up.&#xD;&#xA;&#xD;&#xA; - Search for CANopen Safety Connector&#xD;&#xA;&#xD;&#xA; - Read the list of slaves from the neighbour&#xD;&#xA;   of the CANopen Safety connector, which belongs&#xD;&#xA;   to the unsafe CANopen Master.&#xD;&#xA;&#xD;&#xA; - Set TxSRDO and RxSRDO pointer in base function block.&#xD;&#xA;&#xD;&#xA; - Get pointer to exchange memory, which is provided&#xD;&#xA;   to us by the unsafe CANopen stack.&#xD;&#xA;&#xD;&#xA; - Set diagnostic flags of CANopen Safety master to&#xD;&#xA;   available, found, configured and active&#xD;&#xA;&#xD;&#xA; - Find all slave instances, link them into a list,&#xD;&#xA;   and initialize them&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; Note, that this function makes&#xD;&#xA; no additional checks of nCount consistency.&#xD;&#xA; The IoMgr takes care about the validity&#xD;&#xA; of nCount used in this function.&#xD;&#xA;&#xD;&#xA; The following error codes may be returned:&#xD;&#xA;&#xD;&#xA; - ERR_OK: No errors occured.&#xD;&#xA;&#xD;&#xA; - ERR_FAILED: Failed updating configuration.&#xD;&#xA;&#xD;&#xA; - ERR_PARAMETER: Invalid pConnectorList or nCount.&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :pConnectorList: [VALID_CONNECTOR_LIST,INVALID_CONNECTOR_LIST]&#xD;&#xA;     :nCount: [0,VALID_CONNECTOR_LIST_COUNT]&#xD;&#xA;     :~CRC_IN: [VALID_CRC,INVALID_CRC1,INVALID_CRC2]&#xD;&#xA;     :~result: [ERR_FAILED,ERR_OK,ERR_PARAMETER]&#xD;&#xA;" IsHidden="true" ObjectGUID="{0bafc962-6841-4286-b55a-d697972e25d0}" />
    <Node Name="IoDrvStartBusCycle" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function triggers one bus cycle.&#xD;&#xA;&#xD;&#xA; It is called in the same context as the&#xD;&#xA; bus cycle of the unsafe CANopen stack,&#xD;&#xA; and always at the beginning of the task&#xD;&#xA; cycle.&#xD;&#xA;&#xD;&#xA; This function calculates the current time&#xD;&#xA; and triggers the state machines of the&#xD;&#xA; remote slaves.&#xD;&#xA;&#xD;&#xA; The following error codes may be returned:&#xD;&#xA;&#xD;&#xA; - ERR_OK: This error code is always returned.&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :pConnector: [VALID_CONNECTOR,INVALID_CONNECTOR]&#xD;&#xA;     :~eSlaveState_IN: [STATE_STOPPED,STATE_ERROR,STATE_OPERATIONAL,STATE_CONFIG]&#xD;&#xA;     :~eDiagCode_IN: [DIAG_ERROR,DIAG_NO_ERROR]&#xD;&#xA;     :~xEnable_IN: [TRUE,FALSE]&#xD;&#xA;     :~xErrorAck_IN: [TRUE,FALSE]&#xD;&#xA;     :~xCRCValid_IN: [YES,NO,NONE]&#xD;&#xA;     :~xSRDOReceived_IN: [TRUE,FALSE]&#xD;&#xA;     :~eSlaveState_OUT: [STATE_STOPPED,STATE_ERROR,STATE_OPERATIONAL,STATE_CONFIG]&#xD;&#xA;     :~xActive_OUT: [TRUE,FALSE]&#xD;&#xA;" IsHidden="true" ObjectGUID="{32f95ebe-2a46-43d5-9d7a-f6b4863b8930}" />
    <Node Name="IoDrvGetModuleDiagnosis" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Get the diagnostic information of all slave.&#xD;&#xA;&#xD;&#xA; This function iterates over all slaves, and&#xD;&#xA; stores the diagnostic information in the&#xD;&#xA; corresponding connector.&#xD;&#xA;&#xD;&#xA; The following error codes may be returned:&#xD;&#xA;&#xD;&#xA; - ERR_OK: This error code is always returned.&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :pConnector: [VALID_CONNECTOR,INVALID_CONNECTOR]&#xD;&#xA;     :~xActive_IN: [TRUE,FALSE]&#xD;&#xA;     :~dwFlags_OUT: [ACTIVE,INACTIVE]&#xD;&#xA;" IsHidden="true" ObjectGUID="{37d8bc1e-894a-49f5-a83f-8515e182aa85}" />
    <Node Name="FB_Reinit" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This is an implicit function.&#xD;&#xA;&#xD;&#xA; It is not implemented here, and just&#xD;&#xA; returns always TRUE.&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :~dummy_IN: [TRUE]&#xD;&#xA;" IsHidden="true" ObjectGUID="{779df8c4-7565-4fe0-a4e6-8a083ed234f5}" />
    <Node Name="FB_Init" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This is an implicit function.&#xD;&#xA;&#xD;&#xA; This function initializes some local&#xD;&#xA; variables of the FB, which are identifying&#xD;&#xA; the implemented I/O driver and remember&#xD;&#xA; the interface pointers.&#xD;&#xA;&#xD;&#xA; Furthermore it registers the local FB as&#xD;&#xA; an I/O driver to the I/O manager.&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :bInitRetains: [TRUE,FALSE]&#xD;&#xA;     :bInCopyCode: [TRUE,FALSE]&#xD;&#xA;" IsHidden="true" ObjectGUID="{ea24b66a-99cc-4e26-bbce-342d3c9763c6}" />
    <Node Name="FB_Exit" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This is an implicit function.&#xD;&#xA;&#xD;&#xA; It is not implemented here, and just&#xD;&#xA; returns always TRUE.&#xD;&#xA;&#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :bInCopyCode: [TRUE,FALSE]&#xD;&#xA;" IsHidden="true" ObjectGUID="{4e7368cd-8e66-4cf2-8417-9d40a8a9be62}" />
  </Node>
  <Node Name="CANRemoteDeviceSafe" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function block implements the logic of a CANopen Safety Remote Device. All instances are managed by the CANopenManagerSIL2 in a simple chained list&#xD;&#xA; and called on StartBusCycle.&#xD;&#xA; The function block gets its SRDO config in SetupSDROs and has its own pointer to the Safety Exchange.&#xD;&#xA;&#xD;&#xA; Function block can be enabled/disabled by S_xEnable. When S_xEnable gets TRUE the function block checks every bus cycle&#xD;&#xA; all conditions for safe communication:&#xD;&#xA;&#xD;&#xA;		- Unsafe stack is in OPERATIONAL state&#xD;&#xA;		- CRCs read back from device are correct&#xD;&#xA;		- Consistency of SRDO configuration data&#xD;&#xA;&#xD;&#xA; If a configuration error is detected (e.g. CRC mismatch) S_eError changes from NO_ERROR to a corresponding error code.&#xD;&#xA; If every condition is fulfilled the function block tries starting safe communication. &#xD;&#xA; S_xActive gets TRUE if all SRDOs are sent/received at least one time without any error.&#xD;&#xA; When communication error occurs (SCT/SRVT timeout, data mismatch, ...), all SRDO communication is stopped: S_xActive = FALSE, S_eError &lt;&gt; NO_ERROR &#xD;&#xA; Errors can be acknowledged by a rising edge of S_xErrorAck. Safe communication will be continued.&#xD;&#xA;" ObjectGUID="{7fa2f4e9-a6f6-42b0-a82e-911ecd9e80b6}">
    <Node Name="SendSRDOs" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function sends SRDOs, by copying them to exchange &#xD;&#xA; buffer.&#xD;&#xA;&#xD;&#xA; It is called from OPERATIONAL state of the internal state &#xD;&#xA; machnine and goes through all SRDOs, checks the sending &#xD;&#xA; condition of each one and copies SRDOs, which should be &#xD;&#xA; send, to the exchange buffer.&#xD;&#xA;&#xD;&#xA; The sending condition is defined as follows:&#xD;&#xA; dwTimeDiff + dwHalfCycleTime) &gt;= (uiRefreshTime * DWORD#1000)&#xD;&#xA;&#xD;&#xA; - dwTimeDiff is the elapsed time since last sending.&#xD;&#xA;&#xD;&#xA; - dwHalfCycleTime is half of the last cycle time.&#xD;&#xA;&#xD;&#xA; The function returns TRUE if all SRDOs were send without&#xD;&#xA; errors.&#xD;&#xA;" IsHidden="true" ObjectGUID="{7cf387fb-dce4-4653-a34f-aca1fa03292c}" />
    <Node Name="SendSRDO" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function sends a specific SRDO, by&#xD;&#xA; writing it to the exchange buffer.&#xD;&#xA;&#xD;&#xA; It is called by the SendSRDOs function,&#xD;&#xA; which goes through all SRDOs of the &#xD;&#xA; Slave.&#xD;&#xA;&#xD;&#xA; The function generates the inverse data&#xD;&#xA; for the SRDO, copies the whole SRDO to&#xD;&#xA; the exchange buffer and sets the COBID &#xD;&#xA; of the SRDO.&#xD;&#xA; A COBID unequal 0 of an SRDO in the &#xD;&#xA; exchange buffer triggers the CANopen &#xD;&#xA; unsafe stack to send the SRDO.&#xD;&#xA;&#xD;&#xA; A TTL for every SRDO is also generated&#xD;&#xA; by this function and is defined as follows:&#xD;&#xA; TTL = (current us Timestamp + Refresh Time in us) OR 1&#xD;&#xA; A value of 0 means that no TTL check should&#xD;&#xA; be perfomed. All other TTL values are checked &#xD;&#xA; in the driver and only messages where the TTL &#xD;&#xA; is smaller then the current timestamp are send&#xD;&#xA; to the CANBus.&#xD;&#xA;&#xD;&#xA; Additionally, this function checks if&#xD;&#xA; the previous sending of this SRDO was &#xD;&#xA; successful, by reading the COBID from&#xD;&#xA; the exchange buffer. When a SRDO was &#xD;&#xA; send by the unsafe CANopen stack, it&#xD;&#xA; overwrites the COBID with zero. If the&#xD;&#xA; check fails the SRDO state is set to&#xD;&#xA; SEND_ERROR.&#xD;&#xA;" IsHidden="true" ObjectGUID="{d2bef5be-6975-496f-b42a-85d41ed4295b}" />
    <Node Name="ResetSRDOs" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function resets the internal state&#xD;&#xA; of all SRDOs.&#xD;&#xA;&#xD;&#xA; It is called before the state transition &#xD;&#xA; to OPERATIONAL state is perfomed and it&#xD;&#xA; goes through all SRDOs of the slave and &#xD;&#xA; sets their state to NOT_ACTIVE.&#xD;&#xA;" IsHidden="true" ObjectGUID="{7c76559a-77ee-4a04-96c4-c89a28d3b9b4}" />
    <Node Name="ReceiveSRDOs" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function receives SRDOs from&#xD;&#xA; exchange buffer and checks them.&#xD;&#xA;&#xD;&#xA; It is called from OPERATIONAL state&#xD;&#xA; of the internal state machnine and &#xD;&#xA; goes through all SRDOs, checks the &#xD;&#xA; SCT and SRVT of each one and copies&#xD;&#xA; the valid SRDO into the I/O buffer&#xD;&#xA; of the CANopenManagerSIL2, which is&#xD;&#xA; used in IoDrvReadInputs function.&#xD;&#xA;&#xD;&#xA; The function returns TRUE if at least&#xD;&#xA; one valid SRDO was received and FALSE &#xD;&#xA; if no valid SRDO was received.&#xD;&#xA; &#xD;&#xA; eError is used to signal receive&#xD;&#xA; errors and timeouts (SCT and SRVT).&#xD;&#xA; The function may also return TRUE,&#xD;&#xA; and set eError for example to &#xD;&#xA; SCT_TIMEOUT at the same time. &#xD;&#xA; " IsHidden="true" ObjectGUID="{8a35286b-cf99-4a6f-bf22-9c86218fcfe4}" />
    <Node Name="CheckAllSRDOActive" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns true if all SRDOs are in state ACTIVE.&#xD;&#xA; " IsHidden="true" ObjectGUID="{815beffa-dc1d-471e-be95-4d34f8aed351}" />
    <Node Name="DiscardSRDOs" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function receives all SRDOs from&#xD;&#xA; the exchange buffer and discards them.&#xD;&#xA;&#xD;&#xA; It is called in all states of the &#xD;&#xA; internal state machine, beside of &#xD;&#xA; the OPERATIONAL state, to receive and&#xD;&#xA; discard all received SRDOs, because &#xD;&#xA; they are only handled in OPERATIONAL&#xD;&#xA; state.&#xD;&#xA; " ObjectGUID="{008a32d4-f630-47dd-bf72-95b690e99071}" />
    <Node Name="CheckCRCs" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function checks all SRDO CRCs by &#xD;&#xA; calling the CheckCRC function.&#xD;&#xA;&#xD;&#xA; It is called in the CHECK_CONFIGURATION &#xD;&#xA; state of the internal state machine and &#xD;&#xA; goes through all Tx and RxSRDO to check&#xD;&#xA; if the unsafe CANopen stack has read the&#xD;&#xA; CRC from the slave.&#xD;&#xA;&#xD;&#xA; If all CRCs are read and if they are &#xD;&#xA; equal to the CRCs in the I/O configuration,&#xD;&#xA; the function returns TRUE and sets eError&#xD;&#xA; to NO_ERROR. If a CRC mismatch is detected,&#xD;&#xA; eError is set to INVALID_CONFIGURATION and&#xD;&#xA; the function returns FALSE.&#xD;&#xA;" IsHidden="true" ObjectGUID="{3fd5acb2-bd26-4d75-b618-01a4f70b3ebe}" />
    <Node Name="CheckCRC" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment="	Compares the SRDO CRC read by the unsafe stack (wCRCRead) to CRC in IoConfig.&#xD;&#xA;&#xD;&#xA; This method returns true if CRCs are equal.&#xD;&#xA;&#xD;&#xA; Based on the initial value of the CRC, which&#xD;&#xA; might be gc_CRCInvalid1 or gc_CRCInvalid2&#xD;&#xA; the function sets &quot;eError&quot; to NO_ERROR or to&#xD;&#xA; INVALID_CONFIGURATION.&#xD;&#xA;&#xD;&#xA; To detect if the CRC was already read by the&#xD;&#xA; unsafe stack, there are two invalid CRC values&#xD;&#xA; defined:&#xD;&#xA; &#xD;&#xA; - gc_CRCInvalid1&#xD;&#xA; &#xD;&#xA; - gc_CRCInvalid2&#xD;&#xA; &#xD;&#xA; This is necessary, because the used CRC algorithm&#xD;&#xA; uses the whole 16bit range of the CRC value.&#xD;&#xA; &#xD;&#xA; The rules for assigning the initial value is as this:&#xD;&#xA; &#xD;&#xA; If the calculated CRC is equal to gc_CRCInvalid1, &#xD;&#xA; we are setting it to gc_CRCInvalid2, otherwise&#xD;&#xA; we set it to gc_CRCInvalid1.&#xD;&#xA; &#xD;&#xA; .. cds:ranges::&#xD;&#xA;&#xD;&#xA;     :wCRCRead: [CRC_INVALID1,CRC_INVALID2,CRC_VALID1,CRC_VALID2]&#xD;&#xA;     :wCRC: [CRC_INVALID1,CRC_INVALID2,CRC_VALID1,CRC_VALID2]&#xD;&#xA;     :eError: [CST.ERROR.NO_ERROR,CST.ERROR.INVALID_CONFIGURATION]&#xD;&#xA;" IsHidden="true" ObjectGUID="{5d4b67d8-e1ab-4bef-ba14-e86c608dee84}" />
    <Node Name="SwitchToStopped" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &#xD;&#xA; This function switches to the internal &#xD;&#xA; state machine state STOPPED.&#xD;&#xA;&#xD;&#xA; This state is the error state, where &#xD;&#xA; all received SRDOs are dismissed.&#xD;&#xA;&#xD;&#xA; State transition is valid from every state.&#xD;&#xA; " IsHidden="true" ObjectGUID="{5d7113ff-b03d-44d5-aabb-a3631170160d}" />
    <Node Name="SwitchToOperational" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &#xD;&#xA; This function switches to the internal &#xD;&#xA; state machine state OPERATIONAL.&#xD;&#xA;&#xD;&#xA; In this state safe communication is &#xD;&#xA; performed.&#xD;&#xA;&#xD;&#xA; State transition only valid from &#xD;&#xA; &quot;CHECK_CONFIGURATION&quot; state.&#xD;&#xA;" IsHidden="true" ObjectGUID="{44e0da3d-6453-43c0-81bc-2b921698b7e5}" />
    <Node Name="SwitchToCheckConfig" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &#xD;&#xA; This function switches to the internal &#xD;&#xA; state machine state CHECK_CONFIGURATION.&#xD;&#xA;&#xD;&#xA;	This state is the initial state, where &#xD;&#xA; the slave waits for the unsafe CANopenStack&#xD;&#xA; to read all SRDO CRCs and to write them to &#xD;&#xA; the exchange buffer.&#xD;&#xA;&#xD;&#xA; State transition only valid from &quot;STOPPED&quot; &#xD;&#xA; state.&#xD;&#xA;" IsHidden="true" ObjectGUID="{5b3eae37-7068-493d-b64a-b54c32ba3060}" />
    <Node Name="SetupSRDOs" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function prepares the remote device&#xD;&#xA; function block instance for reading and &#xD;&#xA; writing.&#xD;&#xA;&#xD;&#xA; It is called by CANopenManagerSIL2 and&#xD;&#xA; reads the whole SRDO configuration of &#xD;&#xA; the device, checks it and calls &#xD;&#xA; SetupIoChannels function to prepare &#xD;&#xA; driver specific data, which is used in &#xD;&#xA; IoDrvReadInputs/IoDrvWriteOutputs.&#xD;&#xA;" IsHidden="true" ObjectGUID="{2e6b411c-66fb-4132-a7bb-b9a0ae806c5b}" />
    <Node Name="SetupIoChannels" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function configures the I/O channels&#xD;&#xA; of a given SRDO.&#xD;&#xA;&#xD;&#xA; It is called by the SetupSRDOs function,&#xD;&#xA; which parses the wohle I/O configuration.&#xD;&#xA; All I/O channels of a given SRDO with the&#xD;&#xA; given parameter ID are read form the I/O&#xD;&#xA; configuration and driver specific information,&#xD;&#xA; which is used in IoDrvReadInputs and &#xD;&#xA; IoDrvWriteOutputs to read and write I/O data,&#xD;&#xA; is set.&#xD;&#xA;&#xD;&#xA; dwDriverSpecific is initialized by CANopen &#xD;&#xA; configurator as follows:&#xD;&#xA; 16 bit (value: 0) | &#xD;&#xA; 8 bit Stopbit in SRDO | &#xD;&#xA; 8 bit Startbit in SRDO&#xD;&#xA; &#xD;&#xA; This function modifies dwDriverSpecific&#xD;&#xA; as follows:&#xD;&#xA; 16 bit SRDO Array Index | &#xD;&#xA; 8 Bit value 0x80 | &#xD;&#xA; 8 bit Start Bit in SRDO&#xD;&#xA;&#xD;&#xA; Stop bit is marked with 0x80 to detect that&#xD;&#xA; this I/O channel is already configured.&#xD;&#xA;" IsHidden="true" ObjectGUID="{caa47c44-5e4f-4cb0-9ae4-4e199db6a8f8}" />
    <Node Name="Initialize" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &#xD;&#xA; This is an implicit function.&#xD;&#xA;&#xD;&#xA; It is called by the &quot;Device Object&quot;&#xD;&#xA; and it writes its instance pointer&#xD;&#xA; into the I/O configuration.&#xD;&#xA;&#xD;&#xA; The CANopenMasterSIL2 reads all instance &#xD;&#xA; pointers from the I/O configuration, to &#xD;&#xA; be able to handle all configured slaves.&#xD;&#xA;&#xD;&#xA; Note, that this function makes&#xD;&#xA; no additional checks of pointer consistency.&#xD;&#xA; The DeviceObject takes care about the validity&#xD;&#xA; of pointers and structures, passed to or &#xD;&#xA; used in this function.&#xD;&#xA;" IsHidden="true" ObjectGUID="{b99334ba-1e05-4693-91b0-bd8e7dfe5db6}" />
    <Node Name="UpdateVariables" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &#xD;&#xA; This function sets the output variables&#xD;&#xA; of the CANRemoteDevice function block&#xD;&#xA; and reads current inputs.&#xD;&#xA; " IsHidden="true" ObjectGUID="{368bc051-b4fb-40b1-9a4a-486ad8cf16b6}" />
    <Node Name="StartBusCycle" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function runs one bus cycle of one&#xD;&#xA; specific CAN remote device.&#xD;&#xA;&#xD;&#xA; It is triggered by the CANopenManagerSIL2&#xD;&#xA; IoDriver and implements an internal state&#xD;&#xA; machine with the following states:&#xD;&#xA;&#xD;&#xA; CHECK_CONFIGURATION:&#xD;&#xA;   This is the initial state, where the slave&#xD;&#xA;   waits for the unsafe CANopenStack to read &#xD;&#xA;   all SRDO CRCs and to write them to the &#xD;&#xA;   exchange buffer. When the CRCs in the exchange&#xD;&#xA;   buffer are the same as the CRCs in the&#xD;&#xA;   IO configuration, the state machine state is&#xD;&#xA;   set to OPERATIONAL. If an CRC mismatch is&#xD;&#xA;   detected the state is set to STOPPED and &#xD;&#xA;   the output S_eError is set to INVALID_CONFIGURATION.&#xD;&#xA;&#xD;&#xA; OPERATIONAL:&#xD;&#xA;   In this state safe communication is performed.&#xD;&#xA;   S_xActive output is set when every SRDO is sent/received &#xD;&#xA;   at least one time without any error. If a &#xD;&#xA;   send or receive error is detected, a stete &#xD;&#xA;   transition to STOPPED is performed.&#xD;&#xA;&#xD;&#xA; STOPPED:&#xD;&#xA;   This is the error state, where all received&#xD;&#xA;   SRDOs are dismissed.&#xD;&#xA;" IsHidden="true" ObjectGUID="{caa734de-4dc4-4693-9b2d-00174b11b70d}" />
    <Node Name="GetModuleDiagnosis" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Gets diagnostic information of one specific slave.&#xD;&#xA; &#xD;&#xA; This function stores the diagnostic information&#xD;&#xA; of this slave in the corresponding connector.&#xD;&#xA; CONNECTOR_ACTIVE flag is set according to S_xActive,&#xD;&#xA; which is the output of the CANRemoteDeviceSafe FB,&#xD;&#xA; indicating safe communication.&#xD;&#xA;" IsHidden="true" ObjectGUID="{f0d7f9a0-afd6-4f12-97dc-347a14dad856}" />
    <Node Name="pNextSlave" TypeGUID="{5a3b8626-d3e9-4f37-98b5-66420063d91e}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{99e6c1dd-ae5a-4fb3-81e2-1863812274ee}">
      <Node Name="Set" TypeGUID="{792f2eb6-721e-4e64-ba20-bc98351056db}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{6651c7c8-835f-495c-aca8-695359a23bac}" />
      <Node Name="Get" TypeGUID="{792f2eb6-721e-4e64-ba20-bc98351056db}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Pointer to the next slave in slave list or null if end of list." IsHidden="true" ObjectGUID="{d83f037a-05d6-46cc-a4ff-dcf6138d5f22}" />
    </Node>
  </Node>
  <Node Name="Structures" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{2c1ba4e4-2069-43df-9a30-b79b187fd71c}" />
  <Node Name="Global Constants" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{a857c3d8-efbf-43a2-9852-c87761331762}" />
  <Node Name="Function Blocks" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{eaffabf9-f375-409b-94e8-f7b36305c196}" />
  <Node Name="BufferSizes" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Library parameters for Tx and RxSRDO buffer sizes.&#xD;&#xA; High Limit defines the highest array index.&#xD;&#xA; Values will be set by the configurator." ObjectGUID="{e5620941-2d83-4560-8a00-161f5d9b881c}" />
  <Node Name="_3SCANopenSafety" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{ec361263-f1f8-441c-bc4f-a61b2ffc1c4a}" />
  <Node Name="Project Settings" TypeGUID="{8753fe6f-4a22-4320-8103-e553c4fc8e04}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6470a90f-b7cb-43ac-9ae5-94b2338b4573}" />
  <Node Name="Project Information" TypeGUID="{085afe48-c5d8-4ea5-ab0d-b35701fa6009}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{11c0fc3a-9bcf-4dd8-ac38-efb93363e521}" />
  <Node Name="Library Manager" TypeGUID="{adb5cb65-8e1d-4a00-b70a-375ea27582f3}" EmbeddedTypeGUIDs="" ObjectGUID="{a34438c5-dc3b-49be-a802-a9384242e5c4}" />
</Library>