<?xml version="1.0" encoding="utf-8"?>
<Library Name="Util, 3.5.14.0 (System)">
  <Node Name="LeapYears" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{73cb97ea-b632-434e-a9a2-3f052d99af9c}" />
  <Node Name="ExtractYearMonthDay" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{90441277-d21c-481b-873b-acc790156293}" />
  <Node Name="ConvertDateTime" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns date and time in milliseconds since 1.1.1970 00:00:00.000 " ObjectGUID="{9f8bc04b-69c6-46c4-9925-882aaf8b7a1e}" />
  <Node Name="IDateTimeProvider" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{ecf0117e-56f4-4978-a9c8-b2ac4c3f6ad8}" />
  <Node Name="YEAR" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" 0 or 1970...2106" ObjectGUID="{2169f60e-40f3-4029-89ca-a817e75acab4}" />
  <Node Name="TZ_NAME" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{15b14b7b-d786-4b26-a442-4c68c2e57c70}" />
  <Node Name="SECOND" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{d2b1797c-999f-477a-9d7c-fada70d78141}" />
  <Node Name="MONTH" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment="  1 =&gt; January, ..." ObjectGUID="{f91cd566-948e-4e89-a698-de7ee21df423}" />
  <Node Name="MINUTE" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{6437dbac-6215-4808-991e-debbecd14ee8}" />
  <Node Name="MILLISECOND" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{2fec318f-8d17-4677-a162-b78ffa4f9261}" />
  <Node Name="HOUR" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{a94159c2-918f-446e-abbf-4d241233b767}" />
  <Node Name="DAYS" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" See: |DAY_FLAGS| for the possible values of this type." ObjectGUID="{8c880590-fd5b-4f37-8e9f-340bfbcbaad6}" />
  <Node Name="DAY" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{9ca0f7c1-579a-4fbd-93e2-3f4ec3caddc6}" />
  <Node Name="TimeZone" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{f346b8c6-4c33-46fb-a35f-0f4463c75ee6}" />
  <Node Name="Segment" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{9e68681d-54ec-4dba-92d3-a00fb82035da}" />
  <Node Name="Schedule" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{27f95c2a-359b-43a7-b8c2-006376a7ce3e}" />
  <Node Name="DateTime" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Two formats are supported:&#xD;&#xA;&#xD;&#xA; * Absolute format: defines an exact time. “uiYear”, “uiMonth”, “uiDay”, “uiHour”, “uiMinute” and “uiSecond” define the exact time. &quot;uiWeekday” is of no importance.&#xD;&#xA; * Day of the month format: is selected by setting ”uiYear” to 0. „uiWeekday“ defines a weekday and “uiDay” specifies the day of the month in a value range of 1..5.&#xD;&#xA;   This notation makes it possible to define the first Sunday in April as well as the last Thursday in October&#xD;&#xA;   (“uiDay” = 1 corresponds to the first weekday in a month, “uiDay” = 5 corresponds to the last weekday in a month)&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;     The following applies for the summer time in Europe:&#xD;&#xA;     The switch to summer time is done on the last Sunday in March. At 2:00 a.m. the clock is set ahead by one hour.&#xD;&#xA;     The following applies for the winter time (standard time) in Europe:&#xD;&#xA;     The switch to winter time is done on the last Sunday in October. At 3:00 a.m. the clock is set back by one hour." ObjectGUID="{94c9a77a-89d4-493c-9064-29ddbfe7f4c4}" />
  <Node Name="ITimeSwitch" TypeGUID="{6654496c-404d-479a-aad2-8551054e5f1e}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{62055878-34e6-46b8-ac59-99592bdb25f8}" />
  <Node Name="IDateTimeProvider" TypeGUID="{6654496c-404d-479a-aad2-8551054e5f1e}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{e19f6189-dfe8-4f8f-8292-66a0e8d5a16a}">
    <Node Name="GetDateTime" TypeGUID="{f89f7675-27f1-46b3-8abb-b7da8e774ffd}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Returns the date and (UTC) time in milliseconds since 1.1.1970 00:00:00.000" ObjectGUID="{4ecbbd91-068e-4a4c-a163-d8bd2999ebca}" />
  </Node>
  <Node Name="Globals" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" IsHidden="true" ObjectGUID="{cd51317e-3db2-44da-bb88-6b22ca144fe3}" />
  <Node Name="TSW" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{fa7b8ca0-c07e-40a4-8e9b-0144e0c272ef}" />
  <Node Name="DAY_FLAGS" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{eed87a84-b1cd-4561-89fd-6aae2db68c50}" />
  <Node Name="Constants" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" IsHidden="true" ObjectGUID="{61a71296-3b39-4b4c-9e67-cea520fcd5cc}" />
  <Node Name="SplitDateTime" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{b838fc59-0b92-4b6c-8cd7-428d44134792}" />
  <Node Name="SeparateDateTime" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{6f30ab8d-e810-48c0-959f-45b2ee7a2225}" />
  <Node Name="LocalDateTime" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns the current period and the local date and time in milliseconds since 1.1.1970 00:00:00.000" ObjectGUID="{3906bc44-580f-4bb3-8733-9f3dba1d033c}" />
  <Node Name="JoinDateTime" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns a timestamp in milliseconds since 1.1.1970 00:00:00.000 calculated out of the parameters" ObjectGUID="{b8941b9f-5973-406b-b489-56250894369e}" />
  <Node Name="IsLeapYear" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{d0a4294f-84d0-478b-815d-90d9a11ffc5a}" />
  <Node Name="Internal" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{fd71ea87-cc4f-401f-b179-02b4d27723c5}" />
  <Node Name="DayOfWeek" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{9b99f3f3-56e4-429a-ae87-2ce72d0fda63}" />
  <Node Name="CombineDateTime" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{2b8b2969-85dc-447f-9d71-988dd3317972}" />
  <Node Name="TimerSwitch" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{f1b3192c-3fbd-423d-9fff-315aae9bb41a}">
    <Node Name="GetDateTime" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns the date and (UTC) time in milliseconds since 1.1.1970 00:00:00.000" ObjectGUID="{4d9ac897-72e4-48e2-b5f0-c9447cfab3ca}" />
    <Node Name="StartAction" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{9ab9eac6-564f-4f3f-a67f-d21390f07370}" />
    <Node Name="ResetAction" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{93dac8b1-28ab-40d6-9d7f-12a4a1a94448}" />
    <Node Name="CyclicAction" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" IsHidden="true" ObjectGUID="{cfdc17dd-b931-4f5d-830a-9d07213edf6f}" />
  </Node>
  <Node Name="DateTimeProvider" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{c175d3ab-5cbe-4519-ab55-6a77df8ac57e}">
    <Node Name="GetDateTime" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{0d706b07-82db-4c9a-89ac-3245b93105a2}" />
  </Node>
  <Node Name="WEEKDAY" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{c7785ece-33a0-4ef3-a703-b5c6682652a8}" />
  <Node Name="PERIOD" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{6067219c-0c77-4878-8883-d43cdf0110ca}" />
  <Node Name="ERROR" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{f13851e4-c15c-4448-a3cc-5ae43fe11b73}" />
  <Node Name="Types" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{733deadb-ae48-45b3-af8d-6d477978535c}" />
  <Node Name="Structs" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{53484896-97ba-4b83-97bd-f70950095926}" />
  <Node Name="Interfaces" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{c2fd0448-2df6-4d08-a877-3e57ebde9842}" />
  <Node Name="GlobalVariables" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{fe17f240-98b5-4f7c-b01f-ef88da0cd3d8}" />
  <Node Name="GlobalConstants" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{9ccf332a-a373-4785-81a6-ba240f7df334}" />
  <Node Name="Functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{631ac16f-dc17-4dd7-87eb-6a95ef53aaf7}" />
  <Node Name="FunctionBlocks" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{8ad6e219-0844-4a03-9d00-6077c0ff578e}" />
  <Node Name="Enums" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{d53bc083-e605-4995-83a3-a94382ab23f1}" />
  <Node Name="GEN" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Generates periodic functions of different, given types&#xD;&#xA;&#xD;&#xA; The generation may be done relative to a specific time base or a given call-count base (``BASE``).&#xD;&#xA; An example set of available types of periodic functions are shown in the following image.&#xD;&#xA;&#xD;&#xA; .. image:: @(Generator)&#xD;&#xA;" ObjectGUID="{59edc680-72f3-4600-9006-fe9ac4fd1ac4}" />
  <Node Name="FREQ_MEASURE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Measures the frequency of a signal" ObjectGUID="{1666c726-ba2c-4093-bd39-263c854af6e1}" />
  <Node Name="BLINK" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Simulates a blinking signal (turning on and off for specific durations)" ObjectGUID="{8fa589b9-7aac-4bf3-82e0-7d0c0d3f218d}" />
  <Node Name="VARIANCE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Calculates the mathematical variance of a variable over time&#xD;&#xA;&#xD;&#xA; In this case, over time means that the variance is extended for each call to the function block&#xD;&#xA; until a reset is done." ObjectGUID="{09f5a8fd-63b4-4d0e-9c82-54be9f89f412}" />
  <Node Name="STATISTICS_REAL" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Calculates minimum, maximum, and average of an input value&#xD;&#xA;&#xD;&#xA; The calculation is done over time and can be reset in order to begin a fresh caluclation/statistic." ObjectGUID="{6a3b78e1-4e0c-43e0-9485-dce10203d019}" />
  <Node Name="STATISTICS_INT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Calculates minimum, maximum, and average of an input value&#xD;&#xA;&#xD;&#xA; The calculation is done over time and can be reset in order to start a fresh caluclation/statistic." ObjectGUID="{80b86871-8332-443e-b530-2fae576b5985}" />
  <Node Name="LIN_TRAFO" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Performs a linear transformation&#xD;&#xA;&#xD;&#xA; The transformation is performed by using the minimum and maximum values &#xD;&#xA; of the inputs for a linear approximation of the output value.&#xD;&#xA;&#xD;&#xA; .. admonition:: Application example:&#xD;&#xA;&#xD;&#xA;    A temperature sensor provides Volt-values (input ``IN``). These are to be converted to temperature&#xD;&#xA;    values in degree centigrade (output ``OUT``). The input (Volt) values range is defined by the&#xD;&#xA;    limits ``IN_MIN=0`` and ``IN_MAX=10``. The output(degree centigrade) value range is defined by the&#xD;&#xA;    limits ``OUT_MIN=-20`` and ``OUT_MAX=40``. &#xD;&#xA;    Thus for an input of 5 Volt a temperature of 10 degree centigrade will result. " ObjectGUID="{184920e2-ed81-4a18-9dca-9242894cd587}" />
  <Node Name="INTEGRAL" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" determines approximately the integral over time.&#xD;&#xA;&#xD;&#xA; Example: Function block in FBD&#xD;&#xA;&#xD;&#xA; .. image:: @(Integral)" ObjectGUID="{f226dda4-9940-4f5d-a8ca-cc918f34bf32}" />
  <Node Name="DERIVATIVE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Approximates the derivative of a given value in its time course&#xD;&#xA;&#xD;&#xA; Four consecutive values are recorded and used in the calculation so that the resulting &#xD;&#xA; derivative is as accurate as possible.&#xD;&#xA;&#xD;&#xA; Example: Function block in FBD&#xD;&#xA;&#xD;&#xA; .. image:: @(Derivative)" ObjectGUID="{1b44c2a7-eaea-45b2-bf7c-68ec0123a155}" />
  <Node Name="IsLibReleased" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function has been automatically generated from the project information." ObjectGUID="{445d2b8e-e5c5-54ec-8b5c-0abf82faae3a}" />
  <Node Name="GetLibVersionNumber" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function has been automatically generated from the project information." ObjectGUID="{e5561e6b-e4a3-52c2-afe2-127b8d3ac083}" />
  <Node Name="GetLibVersion" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" This function has been automatically generated from the project information." ObjectGUID="{d754badd-b8c8-5d3b-840b-2496c8e67b65}" />
  <Node Name="Ramp_int" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{387c60a9-9240-4132-a022-ffc2575b1181}" />
  <Node Name="PIDExample" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{d29fa1b1-ab64-44e2-9a1e-9353fe2f5f1b}" />
  <Node Name="PID" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{1d2c5c27-0384-4803-b61e-fa9022e01f01}" />
  <Node Name="Integral" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{f1e9e1df-9f4a-4845-a218-79711cf60e9a}" />
  <Node Name="Hysteresis" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{9daf5c00-001b-4b2c-a763-d8f45dd6573f}" />
  <Node Name="Generator" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{a60724f0-9cc9-4b7e-9a42-cec5d0758068}" />
  <Node Name="Derivative" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{63027f7c-6711-46cb-87d8-b7525399f7a3}" />
  <Node Name="Charcurve" TypeGUID="{a56744ff-693f-4597-95f9-0e1c529fffc2}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{2658a060-c896-4658-aeb0-9a72b372c6f2}" />
  <Node Name="WORD_AS_STRING" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one word into its ASCII string representation&#xD;&#xA;&#xD;&#xA; Example:&#xD;&#xA; &#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;     Input:  '16#AF'&#xD;&#xA;     Byte order: FALSE&#xD;&#xA;     -&gt;&#xD;&#xA;     String: 'AF'&#xD;&#xA;&#xD;&#xA; :return: A STRING(2) representing the HEX code of the input ``W``" ObjectGUID="{3492b16e-1252-4b73-a36f-472feabda9c5}" />
  <Node Name="HEXinASCII_TO_BYTE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one word in HEX code representing its ASCII value into one byte of binary code&#xD;&#xA;&#xD;&#xA; The higher byte in the input represents the higher bits in the output.&#xD;&#xA; Use |BYTE_TO_HEXinASCII| function for the reverse conversion.&#xD;&#xA;&#xD;&#xA; :return: Value in binary code of the input ``W``" ObjectGUID="{924491cb-61a0-4fce-9ce1-0c7c9d0f42a8}" />
  <Node Name="BYTE_TO_HEXinASCII" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one byte of binary code into one word in HEX code representing its ASCII value&#xD;&#xA;&#xD;&#xA; The higher bits in the input are represented by the higher byte in the output.&#xD;&#xA; Use |HEXinASCII_TO_BYTE| function for the reverse conversion.&#xD;&#xA;&#xD;&#xA; :return: ASCII value as WORD of the input ``B``" ObjectGUID="{4dd633ab-73eb-48bf-852f-bdee86ebd748}" />
  <Node Name="WORD_TO_GRAY" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one WORD of binary code into one WORD of GRAY code&#xD;&#xA;&#xD;&#xA; :return: Value in GRAY code for the input ``W``" ObjectGUID="{1302a586-c2ef-41d7-b37e-3aa894052059}" />
  <Node Name="GRAY_TO_WORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one WORD of GRAY code into one WORD of binary code&#xD;&#xA;&#xD;&#xA; Requirements: Functions: ``PUTBIT``, ``EXTRACT``&#xD;&#xA;&#xD;&#xA; :return: Value in binary code for input ``W``" ObjectGUID="{b37b6f4b-da7d-45d9-afba-a525a41a2e9a}" />
  <Node Name="GRAY_TO_DWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one DWORD of GRAY code into one DWORD of binary code&#xD;&#xA;&#xD;&#xA; Requirements: Functions: ``PUTBIT``, ``EXTRACT``&#xD;&#xA;&#xD;&#xA; :return: Value in binary code for input ``X``" ObjectGUID="{282240ee-b9a3-46ad-a1fc-00e088fa145c}" />
  <Node Name="GRAY_TO_BYTE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one byte of GRAY code into one byte of binary code&#xD;&#xA;&#xD;&#xA; Requirements: Functions: ``PUTBIT``, ``EXTRACT``&#xD;&#xA;&#xD;&#xA; :return: Value in binary code for the input ``B``" ObjectGUID="{91a6f8af-4997-4f6f-b333-95fdd1d719bc}" />
  <Node Name="DWORD_TO_GRAY" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one DWORD of binary code into one DWORD of GRAY code&#xD;&#xA;&#xD;&#xA; :return: Value in GRAY code for input ``X``" ObjectGUID="{da702ce7-200f-465e-b0cd-8a307a7a7aa0}" />
  <Node Name="BYTE_TO_GRAY" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one byte of binary code into one byte of GRAY code&#xD;&#xA;&#xD;&#xA; :return: Value in GRAY code for input ``B``" ObjectGUID="{d137b7e7-9edc-47bf-adb0-ab40adb9150e}" />
  <Node Name="RAMP_REAL" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Limits the slope of a value to a certain value&#xD;&#xA;&#xD;&#xA; The function block is similar to ``RAMP_INT`` with the difference that the inputs ``IN``, &#xD;&#xA; ``ASCEND``, ``DESCEND`` and the output ``OUT`` are of the type ``REAL``.&#xD;&#xA; ``RAMP_REAL`` takes more computing time but calculates more precisely than ``RAMP_INT``.&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;    A reset of the function block ( ``RESET`` = ``TRUE``) stops the calculation and the last output value ``OUT`` is maintained.&#xD;&#xA;    So if afterwards the ramp gets restarted by ``RESET`` = ``FALSE``, it will start with this last output value!" ObjectGUID="{318abaaf-c46c-4938-a680-1c1a12f5fa77}" />
  <Node Name="RAMP_INT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Limits the slope of a value to a certain value&#xD;&#xA;&#xD;&#xA; The limitation of the slope is given by the maximum ascend ``ASCEND`` and the maximum descend ``DESCEND`` and a time base&#xD;&#xA; ``TIMEBASE`` defining the time for which ``ASCEND`` or ``DESCEND`` hold.&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;    It is not necessary to readjust the controller parameters (KP, TN, TV) if the cycle time changes.&#xD;&#xA;&#xD;&#xA; **Example**&#xD;&#xA;&#xD;&#xA; .. image:: @(Hysteresis)" ObjectGUID="{4b48bd44-b631-4d77-a8e7-0acdb1b88d74}" />
  <Node Name="CHARCURVE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Maps an input signal onto a characteristic curve&#xD;&#xA;&#xD;&#xA; The characteristic curve is given by an array of POINTs, which include a set of X-values&#xD;&#xA; with their corresponding Y-values.&#xD;&#xA;&#xD;&#xA; Example in ST:&#xD;&#xA; &#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;   VAR&#xD;&#xA;   CHARACTERISTIC_LINE:CHARCURVE; &#xD;&#xA;   KL:ARRAY[0..10] OF POINT := [(X:=0,Y:=0),(X:=250,Y:=50),&#xD;&#xA;   (X:=500,Y:=150),(X:=750,Y:=400), 7((X:=1000,Y:=1000))];&#xD;&#xA;   COUNTER : INT; &#xD;&#xA;   END_VAR&#xD;&#xA;&#xD;&#xA;   COUNTER := COUNTER+10; supply CHARCURVE with for example a constantly increasing value&#xD;&#xA;   CHARACTERISTIC_LINE(IN := COUNTER,N := 5,P := KL);&#xD;&#xA;&#xD;&#xA; Illustration of the resulting curve&#xD;&#xA;&#xD;&#xA; .. image:: @(Charcurve)" ObjectGUID="{5259d0e0-41cc-48c5-ab03-345a809739a7}" />
  <Node Name="BASE64" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" encodes 8 bit binary data into ASCII data&#xD;&#xA;&#xD;&#xA; A text block (string, binary, array of bytes) will be base64 encoded. The maximum of the block is set in the |TextBlockSize| parameter. &#xD;&#xA; This size can be changed but must be divisible by 3.&#xD;&#xA;&#xD;&#xA; If the text block is only a part of a text and followed by more text, the size must be ``TextBlockSize.iBlockSize`` and&#xD;&#xA; the ``isLastBlock`` variable must be set to ``FALSE``. If a text is not followed by another block, the specific length&#xD;&#xA; of it must be used and ``isLastBlock`` has to be set to ``FALSE``, as shown in the following example. The reason is&#xD;&#xA; three 8-bit letters will become four 6-bit letters. If only two 8-Bit letters are remaining at the end, the encoded text is&#xD;&#xA; filled with &quot;=&quot;. This must only be at the end of a text.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; Example:&#xD;&#xA;&#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;     StringToConvert : PT_SIZE;&#xD;&#xA;     EncodedString	: PT_SIZE;&#xD;&#xA;     byError 		: BYTE;&#xD;&#xA;     sText			: STRING := 'This is a test string.';&#xD;&#xA;&#xD;&#xA;     StringToConvert.uiSize := LEN(sText); (* When another block follows, use the size TextBlockSize.iBlockSize&#xD;&#xA;                                           and set isLastBlock to FALSE. *)&#xD;&#xA;     StringToConvert.pString := ADR(sText);&#xD;&#xA;     EncodedString := Base64(TextToEncode := StringToConvert, isLastBlock := TRUE, pbyError := ADR(byError));&#xD;&#xA;&#xD;&#xA; :return: A structure with a pointer to the text and its size" ObjectGUID="{986fa3f1-6677-4f7e-98a0-f2647fc0a927}" />
  <Node Name="PT_SIZE" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{9738f38e-7791-4f0e-be82-c6e361533c57}" />
  <Node Name="POINT" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{52861de0-1ba5-4d80-9fc6-305c4bfd6538}" />
  <Node Name="GEN_MODE" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{1ae7bd22-d6df-4909-8c28-f1c5254d3259}" />
  <Node Name="PID_FIXCYCLE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Represents a PID controller for which the cycle time can be set manually&#xD;&#xA;&#xD;&#xA; A PID controller continuously calculates an error value e(t)&#xD;&#xA; as the difference between a desired set point and a measured process variable. The PID contoller applies a correction &#xD;&#xA; based on proportional, integral, and derivative terms (sometimes denoted P, I, and D respectively) &#xD;&#xA; which give their name to the controller type.&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;    For fast and fix tasks it is recommended to use PID_FIXCYCLE instead of PID, because the cycle&#xD;&#xA;    time is defined accurately, whereas PID only can measure the cycle time with a maximum accuracy&#xD;&#xA;    of milliseconds. In case of very short cycles (1ms) this might lead to a rough run (see PID).&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;    It is not necessary to readjust the controller parameters (KP, TN, TV) if the cycle time changes.&#xD;&#xA;&#xD;&#xA; For more information see: |PID|." ObjectGUID="{a17a5ef0-b1a7-4402-8011-c79d530c1baf}" />
  <Node Name="PID" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Represents a PID controller&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;    The PID controller itself measures the elapsed time between two calls, however with a maximum accuracy of milliseconds. This&#xD;&#xA;    might lead to rough running in case of short cycle times: For example in case of a cycle time of 1ms the PID sometimes might&#xD;&#xA;    measure 2 ms, sometimes 0 ms. So if possible, for such cases better use ``PID_FIXCYCLE``, where the cycle time can be set precisely.&#xD;&#xA;    See |PID_FIXCYCLE|&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;    Consider that the controller parameters only get applied when used in the manual mode at a start, a reset or at a change down.&#xD;&#xA;&#xD;&#xA; A PID controller continuously calculates an error value e(t)&#xD;&#xA; as the difference between a desired set point and a measured process variable. The PID controller applies a correction &#xD;&#xA; based on proportional, integral, and derivative terms (sometimes denoted P, I, and D respectively) &#xD;&#xA; which give their name to the controller type.&#xD;&#xA;&#xD;&#xA; .. image:: @(PID)&#xD;&#xA;&#xD;&#xA; + P accounts for present values of the error. For example, if the error is large and positive, the control output will also be large and positive.&#xD;&#xA; + I accounts for past values of the error. For example, if the current output is not sufficiently strong, the integral of the error will accumulate over time, and the controller will respond by applying a stronger action.&#xD;&#xA; + D accounts for possible future trends of the error, based on its current rate of change.[1]&#xD;&#xA;&#xD;&#xA; As a PID controller relies only on the measured process variable, not on knowledge of the underlying process,&#xD;&#xA; it is broadly applicable. By tuning the three parameters of the model, a PID controller can deal with &#xD;&#xA; specific process requirements. The response of the controller can be described in terms of its responsiveness&#xD;&#xA; to an error, of the degree to which the system overshoots a setpoint, and of the degree of any system oscillation.&#xD;&#xA; The use of the PID algorithm does not guarantee optimal control of the system or even its stability.&#xD;&#xA;&#xD;&#xA; ``Y_OFFSET``, ``Y_MIN`` and ``Y_MAX`` serve for transformation of the manipulated variable within a prescribed range.&#xD;&#xA; ``MANUAL`` can be used to switch to manual operation; ``RESET`` can be used to re-initialize the controller.&#xD;&#xA; In normal operation (``MANUAL = RESET = LIMITS_ACTIVE = FALSE``) the controller calculates the controller error e as difference from ``SET_POINT –&#xD;&#xA; ACTUAL``, generates the derivation with respect to time :math:`\frac{\delta e}{\delta t}` and stores these values internally.&#xD;&#xA;&#xD;&#xA; The output ``Y`` is the manipulated variable unlike the PD controller contains an additional integral part, &#xD;&#xA; and is calculated as follows: :math:`Y = KP \cdot (e + \frac{1}{TN} \int e dt + TV \frac{\delta e}{\delta t}) + Y_{OFFSET}`&#xD;&#xA; So besides the P-part also the current change of the controller error (D-part) and the history of the controller error (I-part) influence the manipulated&#xD;&#xA; variable. The PID controller can be easily converted to a PI-controller by setting ``TV=0``.&#xD;&#xA; Because of the additional integral part, an overflow can come about by incorrect parameterization of the controller, if the integral of the error e becomes&#xD;&#xA; to great. Therefore for the sake of safety a BOOLean output called OVERFLOW is present, which in this case would have the value TRUE. This only&#xD;&#xA; will happen if the control system is instable due to incorrect parameterization. At the same time, the controller will be suspended and will only be&#xD;&#xA; activated again by re-initialization.&#xD;&#xA;  &#xD;&#xA; .. note::&#xD;&#xA;    As long as the limitation for the manipulated variable (``Y_MIN``, ``Y_MAX``) is active, the integral part will be adapted, like if the history&#xD;&#xA;    of the input values had automatically effected the limited output value. If this behaviour is not wanted, the following workaround is&#xD;&#xA;    possible: Switch off the limitation at the PID controller (``Y_MIN&gt;=Y_MAX``) and instead apply the ``LIMIT`` operator (IEC standard) on&#xD;&#xA;    output value ``Y`` (see an example in the figure below).&#xD;&#xA;&#xD;&#xA; .. note::&#xD;&#xA;    It is not necessary to readjust the controller parameters (KP, TN, TV) if the cycle time changes.&#xD;&#xA;&#xD;&#xA; Temperature control with PID and LIMIT&#xD;&#xA; --------------------------------------&#xD;&#xA;&#xD;&#xA; See in the following figure a simple example of using the PID module for temperature control and in combination with the ``LIMIT`` operator. The input of&#xD;&#xA; the actual temperature is simulated by giving a constant value via ActualTemperature.&#xD;&#xA;&#xD;&#xA; .. image:: @(PIDExample)&#xD;&#xA;" ObjectGUID="{e941967d-f225-4b3b-aeac-7276bba503fe}" />
  <Node Name="PD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Represents a PD controller&#xD;&#xA;&#xD;&#xA; A PD controller continuously calculates &#xD;&#xA; an error value e(t) as the difference between a desired set point and a measured process variable. The PD controller &#xD;&#xA; applies a correction based on proportional and derivative terms (sometimes denoted P and D respectively)&#xD;&#xA; which give their name to the controller type.&#xD;&#xA;&#xD;&#xA; ``Y_OFFSET``, ``Y_MIN`` and ``Y_MAX`` are used for the transformation of the manipulated variable&#xD;&#xA; within a prescribed range. ``MANUAL`` can be used to switch on and off manual operation. ``RESET`` serves to reset the&#xD;&#xA; controller. In normal operation ( ``MANUAL = RESET = LIMITS_ACTIVE = FALSE``) the controller calculates&#xD;&#xA; the controller error e as difference ``SET_POINT – ACTUAL``, generates the derivation with respect&#xD;&#xA; to time :math:`\frac{\delta e}{\delta t}` and stores these values internally.&#xD;&#xA;&#xD;&#xA; The output, that is the manipulated variable ``Y``, is calculated as follows: &#xD;&#xA; :math:`Y = KP \cdot (e + TV \frac{\delta e}{\delta t}) + Y_{OFFSET}`&#xD;&#xA; &#xD;&#xA; So besides the P-part also the current change of the controller error (D-part) influences the&#xD;&#xA; manipulated variable. Additionally ``Y`` is limited on a range prescribed by ``Y_MIN`` and ``Y_MAX``. If ``Y`` exceeds these limits,&#xD;&#xA; ``LIMITS_ACTIVE`` will get ``TRUE``. If no limitation of the manipulated variable is desired, ``Y_MIN`` and ``Y_MAX`` &#xD;&#xA; have to be set to 0. As long as ``MANUAL=TRUE``, ``Y_MANUAL`` will be written to ``Y``.&#xD;&#xA; A P controller can be easily created by setting ``TV=0``.&#xD;&#xA;&#xD;&#xA; For more information see: |PID|." ObjectGUID="{d0a656d4-db57-497c-9427-23e14b125a43}" />
  <Node Name="TextBlockSize" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" ObjectGUID="{035ec67f-e3be-42cd-a192-ca96f1d06fc4}" />
  <Node Name="GVL_Const" TypeGUID="{ffbfa93a-b94d-45fc-a329-229860183b1d}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" IsHidden="true" ObjectGUID="{8c59da37-9c6f-4540-af82-a14efb89e5a6}" />
  <Node Name="WORD_AS_BIT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts an input value of data type WORD into 16 outputs of data type BOOL" ObjectGUID="{897c09c8-d965-4d5a-a4e5-060c4b2be753}" />
  <Node Name="UNPACK" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts a byte into 8 bits" ObjectGUID="{22605d08-bad4-4abf-bc7e-0e85ea9d36e2}" />
  <Node Name="SWITCHBIT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Switches a bit of a DWORD value&#xD;&#xA;&#xD;&#xA; See also: |PUTBIT| and |EXTRACT|.&#xD;&#xA;&#xD;&#xA; :return: Value with the switched bit" ObjectGUID="{448bc13e-7473-4212-88b0-ac13c5490b8e}" />
  <Node Name="PUTBIT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Sets a bit of a DWORD value&#xD;&#xA;&#xD;&#xA; Example in ST:&#xD;&#xA; &#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;   var1 := 38;   (* binär 100110 *) &#xD;&#xA;   var2 := PUTBIT(A,4,TRUE); (* Result: 54 = 2#110110 *)&#xD;&#xA;   var3 := PUTBIT(A,1,FALSE); (* Result: 36 = 2#100100 *)&#xD;&#xA;&#xD;&#xA; :return: Value with the changed bit" ObjectGUID="{d2452349-3375-43ac-86fc-d6ec5a6d7c1d}" />
  <Node Name="PACK" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Packs 8 bits into 1 byte&#xD;&#xA;&#xD;&#xA; :return: Value for the input ``BO``..\ ``B7``" ObjectGUID="{60011a55-58a1-4375-82c8-9716fb42734e}" />
  <Node Name="EXTRACT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Returns bit number ``N`` of value ``X``&#xD;&#xA;&#xD;&#xA; Example in ST:&#xD;&#xA; &#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;   FLAG := EXTRACT(X:=81, N:=4);  (* Result : TRUE, because 81 is binary 1010001, so the bit '4' is 1 *) &#xD;&#xA;   FLAG := EXTRACT(X:=33, N:=0);  (* Result : TRUE, because 33 is binary 100001, so the bit '0' is 1 *)&#xD;&#xA;&#xD;&#xA; :return: The Nth bit of value ``X``" ObjectGUID="{6f29d570-9ea3-481c-b257-71194427dc35}" />
  <Node Name="DWORD_AS_BIT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts an input value of data type DWORD into 32 outputs of data type BOOL" ObjectGUID="{bfea84eb-db90-4666-b36d-302b860eb07d}" />
  <Node Name="BYTE_AS_BIT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts an input value of data type byte into 8 outputs of data type BOOL" ObjectGUID="{3c95f4be-5c59-41c0-99a1-9363a649babc}" />
  <Node Name="BIT_AS_WORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts 16 input values of data type BOOL into an output value of the data type WORD" ObjectGUID="{1212aca9-24cc-40ae-9998-7c0ad055cf8d}" />
  <Node Name="BIT_AS_DWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts 32 input values of data type BOOL into an output value of the data type DWORD" ObjectGUID="{a77c633d-cb94-4df2-8b0d-781d227f66f6}" />
  <Node Name="BIT_AS_BYTE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts 8 input values of data type BOOL into an output value of data type byte" ObjectGUID="{a95cc910-4056-4aae-b2db-f5ec45dce332}" />
  <Node Name="WORD_TO_BCD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one WORD in binary code into one WORD in BCD code&#xD;&#xA;&#xD;&#xA; Use |BCD_TO_WORD| for the reverse conversion.&#xD;&#xA;&#xD;&#xA; :return: Value in BCD code for the input ``W``" ObjectGUID="{a39ecbce-3f4a-4bd4-872c-6fc4982f1e5a}" />
  <Node Name="INT_TO_BCD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts an INT value into a byte in BCD code&#xD;&#xA;&#xD;&#xA; Example in ST:&#xD;&#xA; &#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;   i := INT_TO_BCD(49);  (* Result is 73 *) &#xD;&#xA;   k := BCD_TO_INT(97);  (* Result is 151 *)&#xD;&#xA;   l := BCD_TO_INT(100); (* Error! Output: 255 *)&#xD;&#xA;&#xD;&#xA; :return: Value in BCD code for the input ``I``" ObjectGUID="{ae5efc10-77ed-4919-8afb-375549409502}" />
  <Node Name="DWORD_TO_BCD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one DWORD in binary code into one DWORD in BCD code&#xD;&#xA;&#xD;&#xA; Use |BCD_TO_DWORD| for the reverse conversion.&#xD;&#xA;&#xD;&#xA; :return: Value in BCD code for the input ``X``" ObjectGUID="{0b3349ae-e762-4047-85a0-a739dc1d9d36}" />
  <Node Name="BYTE_TO_BCD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one byte in binary code in the range of 0..99 into one byte in BCD code&#xD;&#xA;&#xD;&#xA; Use |BCD_TO_BYTE| for the reverse conversion.&#xD;&#xA;&#xD;&#xA; :return: Value in BCD code for the input ``B``" ObjectGUID="{d177f42b-1d89-42a2-bc5b-9e677f20d487}" />
  <Node Name="BCD_TO_WORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one WORD in BCD code into one WORD in binary code&#xD;&#xA;&#xD;&#xA; Use |WORD_TO_BCD| for the reverse conversion.&#xD;&#xA;&#xD;&#xA; :return: Value in binary code for the input ``W``" ObjectGUID="{95accc3c-7bfd-46b4-9931-ecee8a59d854}" />
  <Node Name="BCD_TO_INT" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one byte in BCD format into an INT value&#xD;&#xA;&#xD;&#xA; Example in ST:&#xD;&#xA; &#xD;&#xA; .. code-block:: codesys&#xD;&#xA;&#xD;&#xA;   i := BCD_TO_INT(73);  (* Result is 49 *) &#xD;&#xA;   k := BCD_TO_INT(151); (* Result is 97 *) &#xD;&#xA;   l := BCD_TO_INT(15);  (* Output -1, because it is not in BCD format *) &#xD;&#xA;&#xD;&#xA; :return: Value as INT for the input ``B``" ObjectGUID="{be462891-8d10-4fe0-aacd-0b80f9a0c863}" />
  <Node Name="BCD_TO_DWORD" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one DWORD in BCD code into one DWORD in binary code&#xD;&#xA;&#xD;&#xA; Use |DWORD_TO_BCD| for the reverse conversion.&#xD;&#xA;&#xD;&#xA; :return: Value in binary code for the input ``X``" ObjectGUID="{af3fefdc-914f-4bd4-8514-5fdc819ea503}" />
  <Node Name="BCD_TO_BYTE" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Converts one byte in BCD code into one byte in binary code&#xD;&#xA;&#xD;&#xA; Use |BYTE_TO_BCD| for the reverse conversion.&#xD;&#xA;&#xD;&#xA; :return: Value in binary code for the input ``B``" ObjectGUID="{cc40263c-63ca-4cf4-91d6-2da8f5fd78a0}" />
  <Node Name="LIMITALARM" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Monitors if an input value is between a lower and a upper limit" ObjectGUID="{a1075d18-c2d1-4a0c-bb92-5d8e98bcf364}" />
  <Node Name="HYSTERESIS" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment="  Realizes a hysteresis function&#xD;&#xA;&#xD;&#xA; .. image:: @(Hysteresis)" ObjectGUID="{ce7b647a-934c-4ea4-83b9-9579349dbaf0}" />
  <Node Name="TimerSwitch" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{bb1b65bb-d50c-4445-8ec4-11f50c097a18}" />
  <Node Name="Signals" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6e821949-5b17-4dfa-84e2-96661655aec6}" />
  <Node Name="Project Settings" TypeGUID="{8753fe6f-4a22-4320-8103-e553c4fc8e04}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6470a90f-b7cb-43ac-9ae5-94b2338b4573}" />
  <Node Name="Project Information" TypeGUID="{085afe48-c5d8-4ea5-ab0d-b35701fa6009}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{11c0fc3a-9bcf-4dd8-ac38-efb93363e521}" />
  <Node Name="Mathematical Functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{bcf095b0-c25c-4b5f-b590-d63f92d38314}" />
  <Node Name="Library Information" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{c8706b13-1f28-4097-8c35-c12aa6824251}" />
  <Node Name="Libraries" TypeGUID="{adb5cb65-8e1d-4a00-b70a-375ea27582f3}" EmbeddedTypeGUIDs="" ObjectGUID="{cc861807-6685-4501-b7ad-78b00b3f2246}" />
  <Node Name="Images" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{f81fbc23-38a6-483f-a9bc-723b679e0ac7}" />
  <Node Name="HEX/ASCII Functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{b7e419e6-4e5c-4d69-99d0-d8f4f515a6a8}" />
  <Node Name="Gray Conversions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{2869bc09-b23f-4d98-a4c2-c605f525f298}" />
  <Node Name="Function Manipulators" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{ea66b900-4f7b-4df9-816b-4090b10d5bdb}" />
  <Node Name="Encoding" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{ac8b06de-918b-48f6-9d73-0423e79c5b2f}" />
  <Node Name="Datatypes" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{8c778f0a-b93f-4a16-9187-c56c51176ed8}" />
  <Node Name="Controller" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{8589a4b4-618e-4f85-93c2-75014a14ad35}" />
  <Node Name="Constants" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{98719b65-3cf8-4e55-a755-9209fd79426a}" />
  <Node Name="Bit/Byte Functions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{12a6f1e6-06c8-4f2b-bb8a-f2126dec0c71}" />
  <Node Name="BCD Conversions" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{787fcfe1-5d17-465f-9f95-b84071b8b6f0}" />
  <Node Name="Analog Monitors" TypeGUID="{738bea1e-99bb-4f04-90bb-a7a567e74e3a}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{934f4542-685f-46f2-af4c-9e4b61e797bd}" />
  <Node Name="00000000-0000-0000-0000-000000000000|D:\temp\Util.Lib Images\Ramp_int.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{b31fe0fc-3003-4600-b808-21022f58fdb4}" />
  <Node Name="00000000-0000-0000-0000-000000000000|D:\temp\Util.Lib Images\Integral.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{b0830409-62a6-4c2c-9f23-7ae78ef9eeb2}" />
  <Node Name="00000000-0000-0000-0000-000000000000|D:\temp\Util.Lib Images\Hysteresis.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{7a927dba-29be-4efa-b112-588c96e3b449}" />
  <Node Name="00000000-0000-0000-0000-000000000000|D:\temp\Util.Lib Images\Derivative.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{c3182094-a2c4-4459-84a5-8f90087dc70e}" />
  <Node Name="00000000-0000-0000-0000-000000000000|D:\temp\Util.Lib Images\Carcurve.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{f61ca5ee-4043-477a-be62-517b9a3cef7e}" />
  <Node Name="00000000-0000-0000-0000-000000000000|C:\Users\j.griesbauer\Desktop\PID_en.svg.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{bae34201-9989-44e1-a8fa-25f0ebb0adb6}" />
  <Node Name="00000000-0000-0000-0000-000000000000|C:\Users\j.griesbauer\Desktop\PIDExample.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{280bc014-50b3-4ae9-81dc-5ddd72aeccd5}" />
  <Node Name="00000000-0000-0000-0000-000000000000|C:\Users\j.griesbauer\Desktop\Generator.png" TypeGUID="{9001d745-b9c5-4d77-90b7-b29c3f77a23b}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{a2994b5c-4131-4d43-a009-506271b599f1}" />
</Library>