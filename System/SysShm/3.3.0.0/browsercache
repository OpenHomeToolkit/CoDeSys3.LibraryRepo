<?xml version="1.0" encoding="utf-8"?>
<Library Name="SysShm, 3.3.0.0 (System)">
  <Node Name="Project Information" TypeGUID="{085afe48-c5d8-4ea5-ab0d-b35701fa6009}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{11c0fc3a-9bcf-4dd8-ac38-efb93363e521}" />
  <Node Name="SysSharedMemoryCreate" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &lt;description&gt;&#xD;&#xA;  Create a new shared memory object specified by name.&#xD;&#xA; &lt;/description&gt;&#xD;&#xA; &lt;param name=&quot;pszName&quot; type=&quot;IN&quot;&gt;Name of the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;ulPhysicalAddress&quot; type=&quot;IN&quot;&gt;Optional physical address.&#xD;&#xA;	ulPhysicalAddress &gt; 0: The shared memory will be mapped on this physical address&#xD;&#xA;	ulPhysicalAddress = 0: A new shared memory will created&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;puiSize&quot; type=&quot;INOUT&quot;&gt;Pointer to requested size of the shared memory.&#xD;&#xA;	If the shared memory object still exists, then the real size is replied in *pulSize.&#xD;&#xA; &lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pResult&quot; type=&quot;OUT&quot;&gt;Pointer to error code:&#xD;&#xA;	ERR_OK: Succeeded&#xD;&#xA;	ERR_DUPLICATE: Shared memory object still exists!&#xD;&#xA;	ERR_NOMEMORY: No memory available on the heap to allocate a management structure&#xD;&#xA;	ERR_FAILED: File to open the shared memory&#xD;&#xA;	ERR_PARAMETER: If one of the parameter is invalid (pszName = NULL or puiSize = NULL)&#xD;&#xA;	ERR_BUFFERSIZE: If shared memory with this name exist, but the requested size is different&#xD;&#xA;		from the available size. In this case, *puiSize returns the available size.&#xD;&#xA; &lt;/param&gt;&#xD;&#xA; &lt;result&gt;Handle to the shared memory object or RTS_INVALID_HANDLE if failed&lt;/result&gt;" ObjectGUID="{4b14d2ed-7253-45ce-b0fe-88a0563a5920}" />
  <Node Name="SysSharedMemoryOpen" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &lt;description&gt;&#xD;&#xA;  *OBSOLETE FUNCTION*&#xD;&#xA;  Opens an existing shared memory object specified by name. If shared memory does not exist, a new shared memory object is&#xD;&#xA;	 created (for backward compatibility)!&#xD;&#xA; &lt;/description&gt;&#xD;&#xA; &lt;param name=&quot;pszName&quot; type=&quot;IN&quot;&gt;Name of the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;ulPhysicalAddress&quot; type=&quot;IN&quot;&gt;Optional physical address.&#xD;&#xA;	ulPhysicalAddress &gt; 0: The shared memory will be mapped on this physical address&#xD;&#xA;	ulPhysicalAddress = 0: A new shared memory will created&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;puiSize&quot; type=&quot;INOUT&quot;&gt;Pointer to requested size of the shared memory.&#xD;&#xA;	If the shared memory object still exists, then the real size is replied in *pulSize.&#xD;&#xA; &lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pResult&quot; type=&quot;OUT&quot;&gt;Pointer to error code:&#xD;&#xA;	ERR_OK: Succeeded. If shared memory does not exit, it will be created.&#xD;&#xA;	ERR_NOMEMORY: No memory available on the heap to allocate a management structure&#xD;&#xA;	ERR_FAILED: File to open the shared memory&#xD;&#xA;	ERR_PARAMETER: If one of the parameter is invalid (pszName = NULL or puiSize = NULL)&#xD;&#xA;	ERR_BUFFERSIZE: If shared memory with this name exist, but the requested size is different&#xD;&#xA;		from the available size. In this case, *puiSize returns the available size.&#xD;&#xA; &lt;/param&gt;&#xD;&#xA; &lt;result&gt;Handle to the shared memory object or RTS_INVALID_HANDLE if failed&lt;/result&gt;" ObjectGUID="{39fc3f5b-2333-45fa-814a-335391ebb7c6}" />
  <Node Name="Project Settings" TypeGUID="{8753fe6f-4a22-4320-8103-e553c4fc8e04}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6470a90f-b7cb-43ac-9ae5-94b2338b4573}" />
  <Node Name="SysSharedMemoryWrite" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &lt;description&gt;&#xD;&#xA;	Routine to write values to shared memory,&#xD;&#xA; &lt;/description&gt;&#xD;&#xA; &lt;param name=&quot;hShm&quot; type=&quot;IN&quot;&gt;Handle to the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;ulOffset&quot; type=&quot;IN&quot;&gt;Offset in the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pbyData&quot; type=&quot;IN&quot;&gt;Pointer to buffer with write data&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;uiSize&quot; type=&quot;IN&quot;&gt;Number of bytes to write&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pResult&quot; type=&quot;OUT&quot;&gt;Pointer to error code&lt;/param&gt;&#xD;&#xA; &lt;result&gt;Number of bytes written to the shared memory&lt;/result&gt;" ObjectGUID="{156bde08-a3bc-451b-a088-1985ea8c8b3f}" />
  <Node Name="SysSharedMemoryClose" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &lt;description&gt;&#xD;&#xA;  Close a shared memory object specified by handle&#xD;&#xA; &lt;/description&gt;&#xD;&#xA; &lt;param name=&quot;hShm&quot; type=&quot;IN&quot;&gt;Handle to the shared memory&lt;/param&gt;&#xD;&#xA; &lt;result&gt;error code&lt;/result&gt;" ObjectGUID="{35dd5512-2521-4861-a9f2-282718033d1b}" />
  <Node Name="SysSharedMemoryWriteByte" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &lt;description&gt;&#xD;&#xA;	Routine to write values to shared memory byte wise,&#xD;&#xA; &lt;/description&gt;&#xD;&#xA; &lt;param name=&quot;hShm&quot; type=&quot;IN&quot;&gt;Handle to the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;ulOffset&quot; type=&quot;IN&quot;&gt;Offset in the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pbyData&quot; type=&quot;IN&quot;&gt;Pointer to buffer with write data&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;uiSize&quot; type=&quot;IN&quot;&gt;Number of bytes to write&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pResult&quot; type=&quot;OUT&quot;&gt;Pointer to error code&lt;/param&gt;&#xD;&#xA; &lt;result&gt;Number of bytes written to the shared memory&lt;/result&gt;" ObjectGUID="{c13f17d9-5ade-4665-be23-71b168c90757}" />
  <Node Name="SysSharedMemoryDelete" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &lt;description&gt;&#xD;&#xA;  Delete a shared memory object specified by handle&#xD;&#xA; &lt;/description&gt;&#xD;&#xA; &lt;param name=&quot;hShm&quot; type=&quot;IN&quot;&gt;Handle to the shared memory&lt;/param&gt;&#xD;&#xA; &lt;result&gt;error code&lt;/result&gt;" ObjectGUID="{4b7c8ab9-d33f-4117-a075-f5172b6f0cf2}" />
  <Node Name="Bibliotheksverwalter" TypeGUID="{adb5cb65-8e1d-4a00-b70a-375ea27582f3}" EmbeddedTypeGUIDs="" ObjectGUID="{8b49a4a4-cada-4e29-aa6a-58dcdb9c38e8}" />
  <Node Name="SysSharedMemoryOpen2" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &lt;description&gt;&#xD;&#xA;  Opens an existing shared memory object specified by name.&#xD;&#xA; &lt;/description&gt;&#xD;&#xA; &lt;param name=&quot;pszName&quot; type=&quot;IN&quot;&gt;Name of the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;ulPhysicalAddress&quot; type=&quot;IN&quot;&gt;Optional physical address.&#xD;&#xA;	ulPhysicalAddress &gt; 0: The shared memory will be mapped on this physical address&#xD;&#xA;	ulPhysicalAddress = 0: A new shared memory will created&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;puiSize&quot; type=&quot;INOUT&quot;&gt;Pointer to requested size of the shared memory.&#xD;&#xA;	If the shared memory object still exists, then the real size is replied in *pulSize.&#xD;&#xA; &lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pResult&quot; type=&quot;OUT&quot;&gt;Pointer to error code:&#xD;&#xA;	ERR_OK: Succeeded&#xD;&#xA;	ERR_NO_OBJECT: If shared memory does not exist.&#xD;&#xA;	ERR_NOMEMORY: No memory available on the heap to allocate a management structure&#xD;&#xA;	ERR_FAILED: File to open the shared memory&#xD;&#xA;	ERR_PARAMETER: If one of the parameter is invalid (pszName = NULL or puiSize = NULL)&#xD;&#xA;	ERR_BUFFERSIZE: If shared memory with this name exist, but the requested size is different&#xD;&#xA;		from the available size. In this case, *puiSize returns the available size.&#xD;&#xA; &lt;/param&gt;&#xD;&#xA; &lt;result&gt;Handle to the shared memory object or RTS_INVALID_HANDLE if failed&lt;/result&gt;" ObjectGUID="{1049d635-2c5f-4f88-a50f-ad2cd4ec0c43}" />
  <Node Name="SysSharedMemoryRead" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &lt;description&gt;&#xD;&#xA;	Routine to read values from shared memory,&#xD;&#xA;	ulOffset: offset in the shared memory&#xD;&#xA;	pbyData: Pointer to the buffer to read in values&#xD;&#xA;	ulSize: number of bytes to read&#xD;&#xA; &lt;/description&gt;&#xD;&#xA; &lt;param name=&quot;hShm&quot; type=&quot;IN&quot;&gt;Handle to the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;ulOffset&quot; type=&quot;IN&quot;&gt;Offset in the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pbyData&quot; type=&quot;OUT&quot;&gt;Pointer to buffer to read in data&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;uiSize&quot; type=&quot;IN&quot;&gt;Number of bytes to read&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pResult&quot; type=&quot;OUT&quot;&gt;Pointer to error code&lt;/param&gt;&#xD;&#xA; &lt;result&gt;Number of bytes read from the shared memory&lt;/result&gt;" ObjectGUID="{e77e71d8-d7d2-477f-a88a-25a3d73a7ac2}" />
  <Node Name="SysSharedMemoryReadByte" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &lt;description&gt;&#xD;&#xA;	Routine to read values from shared memory byte wise&#xD;&#xA; &lt;/description&gt;&#xD;&#xA; &lt;param name=&quot;hShm&quot; type=&quot;IN&quot;&gt;Handle to the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;ulOffset&quot; type=&quot;IN&quot;&gt;Offset in the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pbyData&quot; type=&quot;OUT&quot;&gt;Pointer to buffer to read in data&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;uiSize&quot; type=&quot;IN&quot;&gt;Number of bytes to read&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pResult&quot; type=&quot;OUT&quot;&gt;Pointer to error code&lt;/param&gt;&#xD;&#xA; &lt;result&gt;Number of bytes read from the shared memory&lt;/result&gt;" ObjectGUID="{e3d8ae0a-3356-4b12-ada2-c25848057a0c}" />
  <Node Name="SysSharedMemoryGetPointer" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" &lt;description&gt;&#xD;&#xA;  Get the pointer to the shared memory&#xD;&#xA; &lt;/description&gt;&#xD;&#xA; &lt;param name=&quot;hShm&quot; type=&quot;IN&quot;&gt;Handle to the shared memory&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;pResult&quot; type=&quot;OUT&quot;&gt;Pointer to error code&lt;/param&gt;&#xD;&#xA; &lt;result&gt;Pointer to the shared memory for data access&lt;/result&gt;" ObjectGUID="{90cc5520-0f5b-4122-98ca-f47d6adf8745}" />
</Library>