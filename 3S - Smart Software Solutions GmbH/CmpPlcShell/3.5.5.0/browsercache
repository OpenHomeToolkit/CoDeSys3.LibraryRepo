<?xml version="1.0" encoding="utf-8"?>
<Library Name="CmpPlcShell, 3.5.5.0 (3S - Smart Software Solutions GmbH)">
  <Node Name="PlcShellAppend" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Append a line to the command output&#xD;&#xA;&#xD;&#xA; The passed parameter iBlockID, has TO be the BlockID, which&#xD;&#xA; was passed to the command handler!&#xD;&#xA; The communication layer automatically manages the split of&#xD;&#xA; blocks. If you want to avoid this and write only the current&#xD;&#xA; block that is sent to CoDeSys, use the function PlcShellSkip().&#xD;&#xA; RETURN: Returns the runtime system error code (see CmpErrors.library)" ObjectGUID="{f5a8b69c-3641-4377-b359-3fed10c27b90}" />
  <Node Name="CommandHandler" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Command Handler for the PLCShell.&#xD;&#xA; This function block can be used as a base to register custom&#xD;&#xA; Command Handlers in the PLCShell. To implement a new Command&#xD;&#xA; Handler, just:&#xD;&#xA;	+ extend this function block&lt;/li&gt;&#xD;&#xA;	+ Call SUPER^.Register() on FB_init&lt;/li&gt;&#xD;&#xA;	+ Overload CommandHandler() with your own command&lt;/li&gt;&#xD;&#xA; An example in Pseudocode:&#xD;&#xA;	FUNCTION BLOCK MyCommandHandler EXTENDS CommandHandler&#xD;&#xA;	&#xD;&#xA;	METHOD CommandHandler&#xD;&#xA;	PlcShellAppend('The output of my command', iBlockID);&#xD;&#xA;	&#xD;&#xA;	METHOD FB_init&#xD;&#xA;	SUPER^.Register('myCmd', 'myCmd$r$n$tmyHelp');&#xD;&#xA;&#xD;&#xA;	METHOD FB_exit&#xD;&#xA; The registration is done in the function Register() and the&#xD;&#xA; deregistration is done in the FB_exit of the base FB." ObjectGUID="{d1d5f7c1-224f-4143-87a7-87e24371eb86}">
    <Node Name="FB_init" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{13e212a5-b0a9-45be-9ae4-138210558346}" />
    <Node Name="Register" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{a7fb6e84-1381-49a4-a1b7-1b350f8fd2e4}" />
    <Node Name="EventCallback" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{b6d3c020-e06a-4984-8b98-f379dc7a4ba8}" />
    <Node Name="CommandHandler" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{2cde8917-a91c-418a-8355-fd7f5744da47}" />
    <Node Name="FB_exit" TypeGUID="{f8a58466-d7f6-439f-bbb8-d4600e41d099}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" ObjectGUID="{22ad5b46-aeb0-46c9-8407-904996ada553}" />
  </Node>
  <Node Name="Project Information" TypeGUID="{085afe48-c5d8-4ea5-ab0d-b35701fa6009}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{11c0fc3a-9bcf-4dd8-ac38-efb93363e521}" />
  <Node Name="EVTPARAM_PlcShellCommand" TypeGUID="{2db5746d-d284-4425-9f7f-2663a34b0ebc}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}" Comment=" Event Parameter, passed to the Command Handler&lt;/b&gt;&#xD;&#xA; &#xD;&#xA; The Command Handlers are called, using the event interface&#xD;&#xA; of the EventMgr. These are the parameters that are passed&#xD;&#xA; to the event. To get the parameters, you need to cast the&#xD;&#xA; element &quot;pParameter&quot; from the &quot;pEventParam&quot;, that is passed&#xD;&#xA; to the EventCallback.&#xD;&#xA; &#xD;&#xA; 	METHOD EventCallback : UDINT&#xD;&#xA; 	VAR_INPUT&#xD;&#xA; 		pEventParam : POINTER TO EventParam;&#xD;&#xA; 	END_VAR&#xD;&#xA; &#xD;&#xA; pParam := pEventParam^.pParameter;" ObjectGUID="{0a3ec45a-3840-48f3-badf-bc096748d3b1}" />
  <Node Name="Project Settings" TypeGUID="{8753fe6f-4a22-4320-8103-e553c4fc8e04}" EmbeddedTypeGUIDs="" ProvidesLanguageModel="false" ObjectGUID="{6470a90f-b7cb-43ac-9ae5-94b2338b4573}" />
  <Node Name="PlcShellUnregister" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Unregister a new Command Handler&#xD;&#xA; &#xD;&#xA; Unregister the command handler, which is passed&#xD;&#xA; to this function. Most likely this function will&#xD;&#xA; be used in FB_exit, because every Command Handler&#xD;&#xA; in IEC has to unregister when the application&#xD;&#xA; is deleted.&#xD;&#xA; RETURN: Returns the runtime system error code (see CmpErrors.library)" ObjectGUID="{a2cabb31-1034-4958-93f8-cc82bffa0069}" />
  <Node Name="Library Manager" TypeGUID="{adb5cb65-8e1d-4a00-b70a-375ea27582f3}" EmbeddedTypeGUIDs="" ObjectGUID="{ac173535-9f46-4adb-8026-c2847592bfc7}" />
  <Node Name="PlcShellSkip" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Skip a number of blocks in the output.&#xD;&#xA; &#xD;&#xA; If a Command Handler sends a huge amount of output, it&#xD;&#xA; might be necessary, that this output is splitted into&#xD;&#xA; several blocks by the communication layer. When this&#xD;&#xA; happens, the communication layer will discard everything,&#xD;&#xA; but the current block from the output and recall the&#xD;&#xA; Command Handler several times.&#xD;&#xA; &#xD;&#xA; To avoid this, an intelligent Command Handler can generate&#xD;&#xA; only the currently necessary block of output. For this,&#xD;&#xA; it needs to &quot;skip&quot; all blocks, which are already sent, by&#xD;&#xA; calling this function. Then it should write only that much&#xD;&#xA; data, that they fit into one block and call PlcShellSetEof()&#xD;&#xA; when it is finished.&#xD;&#xA; RETURN: Returns the runtime system error code (see CmpErrors.library)" ObjectGUID="{a858ace9-455c-43f6-a249-c89118ad3d65}" />
  <Node Name="PlcShellRegister" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Register a new Command Handler&#xD;&#xA;&#xD;&#xA; The command is sent TO the handler as an event OF the&#xD;&#xA; EventMgr. So the CommandHandler needs to implement the&#xD;&#xA; Interface ICmpEventCallback.&#xD;&#xA; &#xD;&#xA; Note: For the ease of use, you can also derive your Command&#xD;&#xA; Handler from the FB &quot;CommandHandler&quot; in this library. This&#xD;&#xA; helps you in the registration and deregistration of the&#xD;&#xA; handler.&#xD;&#xA; RETURN: Returns the runtime system error code (see CmpErrors.library)" ObjectGUID="{058ba886-8eb1-4a41-8944-ae353e010cc1}" />
  <Node Name="PlcShellSetEof" TypeGUID="{6f9dac99-8de1-4efc-8465-68ac443b7d08}" EmbeddedTypeGUIDs="{a9ed5b7e-75c5-4651-af16-d2c27e98cb94};{3b83b776-fb25-43b8-99f2-3c507c9143fc}" Comment=" Set EOF&#xD;&#xA; &#xD;&#xA; This function should be called when the Command Handler&#xD;&#xA; is finished with it's output.&#xD;&#xA; RETURN: Returns the runtime system error code (see CmpErrors.library)" ObjectGUID="{463aedf4-f5d1-416c-a6b3-a27ca97a74e5}" />
</Library>